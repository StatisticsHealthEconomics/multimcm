// Generated by rstantools.  Do not edit by hand.

/*
    rstanbmcm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanbmcm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanbmcm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_exp_exp_joint_mix_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_exp_exp_joint_mix");
    reader.add_event(6, 6, "include", "/include/distributions.stan");
    reader.add_event(6, 0, "start", "/include/distributions.stan");
    reader.add_event(150, 144, "end", "/include/distributions.stan");
    reader.add_event(150, 7, "restart", "model_exp_exp_joint_mix");
    reader.add_event(306, 161, "end", "model_exp_exp_joint_mix");
    return reader;
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_log_h(const T0__& t,
              const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 16;
        local_scalar_t__ logh(DUMMY_VAR__);
        (void) logh;  // dummy to suppress unused var warning
        stan::math::initialize(logh, DUMMY_VAR__);
        stan::math::fill(logh, DUMMY_VAR__);
        current_statement_begin__ = 17;
        stan::math::assign(logh, stan::math::log(rate));
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_log_h_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
              const T1__& rate, std::ostream* pstream__) const {
        return exp_log_h(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_haz(const T0__& t,
            const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 23;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 24;
        stan::math::assign(h, rate);
        current_statement_begin__ = 25;
        return stan::math::promote_scalar<fun_return_scalar_t__>(h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_haz_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
            const T1__& rate, std::ostream* pstream__) const {
        return exp_haz(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_log_S(const T0__& t,
              const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        local_scalar_t__ logS(DUMMY_VAR__);
        (void) logS;  // dummy to suppress unused var warning
        stan::math::initialize(logS, DUMMY_VAR__);
        stan::math::fill(logS, DUMMY_VAR__);
        current_statement_begin__ = 31;
        stan::math::assign(logS, (-(rate) * t));
        current_statement_begin__ = 32;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_log_S_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
              const T1__& rate, std::ostream* pstream__) const {
        return exp_log_S(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_Surv(const T0__& t,
             const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 37;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 38;
        stan::math::assign(S, stan::math::exp((-(rate) * t)));
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_Surv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
             const T1__& rate, std::ostream* pstream__) const {
        return exp_Surv(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_pdf(const T0__& t,
                 const T1__& d,
                 const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 45;
        stan::math::assign(lik, (pow(exp_haz(t, rate, pstream__), d) * exp_Surv(t, rate, pstream__)));
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct surv_exp_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& d,
                 const T2__& rate, std::ostream* pstream__) const {
        return surv_exp_pdf(t, d, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_lpdf(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 51;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 52;
        stan::math::assign(log_lik, ((d * exp_log_h(t, rate, pstream__)) + exp_log_S(t, rate, pstream__)));
        current_statement_begin__ = 53;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_lpdf(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) {
    return surv_exp_lpdf<false>(t,d,rate, pstream__);
}
struct surv_exp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) const {
        return surv_exp_lpdf(t, d, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_log_h(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 65;
        local_scalar_t__ logh(DUMMY_VAR__);
        (void) logh;  // dummy to suppress unused var warning
        stan::math::initialize(logh, DUMMY_VAR__);
        stan::math::fill(logh, DUMMY_VAR__);
        current_statement_begin__ = 66;
        stan::math::assign(logh, ((stan::math::log(shape) + ((shape - 1) * stan::math::log((t / scale)))) - stan::math::log(scale)));
        current_statement_begin__ = 67;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return weibull_log_h(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_haz(const T0__& t,
                const T1__& shape,
                const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 71;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 72;
        stan::math::assign(h, ((shape / scale) * pow((t / scale), (shape - 1))));
        current_statement_begin__ = 73;
        return stan::math::promote_scalar<fun_return_scalar_t__>(h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                const T1__& shape,
                const T2__& scale, std::ostream* pstream__) const {
        return weibull_haz(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_log_S(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 78;
        local_scalar_t__ logS(DUMMY_VAR__);
        (void) logS;  // dummy to suppress unused var warning
        stan::math::initialize(logS, DUMMY_VAR__);
        stan::math::fill(logS, DUMMY_VAR__);
        current_statement_begin__ = 79;
        stan::math::assign(logS, -(pow((t / scale), shape)));
        current_statement_begin__ = 80;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return weibull_log_S(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_Surv(const T0__& t,
                 const T1__& shape,
                 const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 85;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 86;
        stan::math::assign(S, stan::math::exp(-(pow((t / scale), shape))));
        current_statement_begin__ = 87;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& shape,
                 const T2__& scale, std::ostream* pstream__) const {
        return weibull_Surv(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, T_lp__>::type
surv_weibull_lp(const T0__& t,
                    const T1__& d,
                    const T2__& shape,
                    const T3__& scale, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 92;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 93;
        stan::math::assign(log_lik, ((d * weibull_log_h(t, shape, scale, pstream__)) + weibull_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct surv_weibull_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, T_lp__>::type
    operator()(const T0__& t,
                    const T1__& d,
                    const T2__& shape,
                    const T3__& scale, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return surv_weibull_lp(t, d, shape, scale, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_log_h(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 106;
        local_scalar_t__ log_h(DUMMY_VAR__);
        (void) log_h;  // dummy to suppress unused var warning
        stan::math::initialize(log_h, DUMMY_VAR__);
        stan::math::fill(log_h, DUMMY_VAR__);
        current_statement_begin__ = 107;
        stan::math::assign(log_h, (stan::math::log(rate) + (shape * t)));
        current_statement_begin__ = 108;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) const {
        return gompertz_log_h(t, shape, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_log_S(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 113;
        local_scalar_t__ log_S(DUMMY_VAR__);
        (void) log_S;  // dummy to suppress unused var warning
        stan::math::initialize(log_S, DUMMY_VAR__);
        stan::math::fill(log_S, DUMMY_VAR__);
        current_statement_begin__ = 114;
        stan::math::assign(log_S, ((-(rate) / shape) * (stan::math::exp((shape * t)) - 1)));
        current_statement_begin__ = 115;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) const {
        return gompertz_log_S(t, shape, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_Surv(const T0__& t,
                  const T1__& shape,
                  const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 120;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 121;
        stan::math::assign(S, stan::math::exp(((-(rate) / shape) * (stan::math::exp((shape * t)) - 1))));
        current_statement_begin__ = 122;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& rate, std::ostream* pstream__) const {
        return gompertz_Surv(t, shape, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, T_lp__>::type
surv_gompertz_lp(const T0__& t,
                     const T1__& d,
                     const T2__& shape,
                     const T3__& rate, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, T_lp__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 127;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 128;
        stan::math::assign(log_lik, ((d * gompertz_log_h(t, shape, rate, pstream__)) + gompertz_log_S(t, shape, rate, pstream__)));
        current_statement_begin__ = 129;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct surv_gompertz_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, T_lp__>::type
    operator()(const T0__& t,
                     const T1__& d,
                     const T2__& shape,
                     const T3__& rate, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return surv_gompertz_lp(t, d, shape, rate, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_weibull_pdf(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale,
                          const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 138;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 139;
        stan::math::assign(log_lik, ((exp_Surv(t, rate, pstream__) * weibull_Surv(t, shape, scale, pstream__)) * pow((exp_haz(t, rate, pstream__) + weibull_haz(t, shape, scale, pstream__)), d)));
        current_statement_begin__ = 141;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct joint_exp_weibull_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale,
                          const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_weibull_pdf(t, d, shape, scale, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_weibull_lpdf(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 145;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 146;
        stan::math::assign(log_lik, (((d * stan::math::log((exp_haz(t, rate, pstream__) + weibull_haz(t, shape, scale, pstream__)))) + exp_log_S(t, rate, pstream__)) + weibull_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 148;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_weibull_lpdf(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) {
    return joint_exp_weibull_lpdf<false>(t,d,shape,scale,rate, pstream__);
}
struct joint_exp_weibull_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_weibull_lpdf(t, d, shape, scale, rate, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_exp_exp_joint_mix
  : public stan::model::model_base_crtp<model_exp_exp_joint_mix> {
private:
        int n_os;
        int n_pfs;
        int H_os;
        int H_pfs;
        vector_d t_os;
        vector_d t_pfs;
        vector_d d_os;
        vector_d d_pfs;
        matrix_d X_os;
        matrix_d X_pfs;
        vector_d mu_0_os;
        vector_d mu_0_pfs;
        vector_d sigma_0_os;
        vector_d sigma_0_pfs;
        vector_d mu_bg;
        vector_d sigma_bg;
        double mu_joint;
        double sigma_joint;
        double a_cf;
        double b_cf;
        int t_max;
public:
    model_exp_exp_joint_mix(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_exp_exp_joint_mix(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_exp_exp_joint_mix_namespace::model_exp_exp_joint_mix";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 155;
            context__.validate_dims("data initialization", "n_os", "int", context__.to_vec());
            n_os = int(0);
            vals_i__ = context__.vals_i("n_os");
            pos__ = 0;
            n_os = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_os", n_os, 0);
            current_statement_begin__ = 156;
            context__.validate_dims("data initialization", "n_pfs", "int", context__.to_vec());
            n_pfs = int(0);
            vals_i__ = context__.vals_i("n_pfs");
            pos__ = 0;
            n_pfs = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pfs", n_pfs, 0);
            current_statement_begin__ = 157;
            context__.validate_dims("data initialization", "H_os", "int", context__.to_vec());
            H_os = int(0);
            vals_i__ = context__.vals_i("H_os");
            pos__ = 0;
            H_os = vals_i__[pos__++];
            check_greater_or_equal(function__, "H_os", H_os, 0);
            current_statement_begin__ = 158;
            context__.validate_dims("data initialization", "H_pfs", "int", context__.to_vec());
            H_pfs = int(0);
            vals_i__ = context__.vals_i("H_pfs");
            pos__ = 0;
            H_pfs = vals_i__[pos__++];
            check_greater_or_equal(function__, "H_pfs", H_pfs, 0);
            current_statement_begin__ = 161;
            validate_non_negative_index("t_os", "n_os", n_os);
            context__.validate_dims("data initialization", "t_os", "vector_d", context__.to_vec(n_os));
            t_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_os);
            vals_r__ = context__.vals_r("t_os");
            pos__ = 0;
            size_t t_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < t_os_j_1_max__; ++j_1__) {
                t_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 162;
            validate_non_negative_index("t_pfs", "n_pfs", n_pfs);
            context__.validate_dims("data initialization", "t_pfs", "vector_d", context__.to_vec(n_pfs));
            t_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_pfs);
            vals_r__ = context__.vals_r("t_pfs");
            pos__ = 0;
            size_t t_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < t_pfs_j_1_max__; ++j_1__) {
                t_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 164;
            validate_non_negative_index("d_os", "n_os", n_os);
            context__.validate_dims("data initialization", "d_os", "vector_d", context__.to_vec(n_os));
            d_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_os);
            vals_r__ = context__.vals_r("d_os");
            pos__ = 0;
            size_t d_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < d_os_j_1_max__; ++j_1__) {
                d_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 165;
            validate_non_negative_index("d_pfs", "n_pfs", n_pfs);
            context__.validate_dims("data initialization", "d_pfs", "vector_d", context__.to_vec(n_pfs));
            d_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_pfs);
            vals_r__ = context__.vals_r("d_pfs");
            pos__ = 0;
            size_t d_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < d_pfs_j_1_max__; ++j_1__) {
                d_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 167;
            validate_non_negative_index("X_os", "n_os", n_os);
            validate_non_negative_index("X_os", "H_os", H_os);
            context__.validate_dims("data initialization", "X_os", "matrix_d", context__.to_vec(n_os,H_os));
            X_os = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_os, H_os);
            vals_r__ = context__.vals_r("X_os");
            pos__ = 0;
            size_t X_os_j_2_max__ = H_os;
            size_t X_os_j_1_max__ = n_os;
            for (size_t j_2__ = 0; j_2__ < X_os_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_os_j_1_max__; ++j_1__) {
                    X_os(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 168;
            validate_non_negative_index("X_pfs", "n_pfs", n_pfs);
            validate_non_negative_index("X_pfs", "H_pfs", H_pfs);
            context__.validate_dims("data initialization", "X_pfs", "matrix_d", context__.to_vec(n_pfs,H_pfs));
            X_pfs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_pfs, H_pfs);
            vals_r__ = context__.vals_r("X_pfs");
            pos__ = 0;
            size_t X_pfs_j_2_max__ = H_pfs;
            size_t X_pfs_j_1_max__ = n_pfs;
            for (size_t j_2__ = 0; j_2__ < X_pfs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_pfs_j_1_max__; ++j_1__) {
                    X_pfs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 170;
            validate_non_negative_index("mu_0_os", "H_os", H_os);
            context__.validate_dims("data initialization", "mu_0_os", "vector_d", context__.to_vec(H_os));
            mu_0_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_os);
            vals_r__ = context__.vals_r("mu_0_os");
            pos__ = 0;
            size_t mu_0_os_j_1_max__ = H_os;
            for (size_t j_1__ = 0; j_1__ < mu_0_os_j_1_max__; ++j_1__) {
                mu_0_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 171;
            validate_non_negative_index("mu_0_pfs", "H_pfs", H_pfs);
            context__.validate_dims("data initialization", "mu_0_pfs", "vector_d", context__.to_vec(H_pfs));
            mu_0_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_pfs);
            vals_r__ = context__.vals_r("mu_0_pfs");
            pos__ = 0;
            size_t mu_0_pfs_j_1_max__ = H_pfs;
            for (size_t j_1__ = 0; j_1__ < mu_0_pfs_j_1_max__; ++j_1__) {
                mu_0_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 172;
            validate_non_negative_index("sigma_0_os", "H_os", H_os);
            context__.validate_dims("data initialization", "sigma_0_os", "vector_d", context__.to_vec(H_os));
            sigma_0_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_os);
            vals_r__ = context__.vals_r("sigma_0_os");
            pos__ = 0;
            size_t sigma_0_os_j_1_max__ = H_os;
            for (size_t j_1__ = 0; j_1__ < sigma_0_os_j_1_max__; ++j_1__) {
                sigma_0_os(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_0_os", sigma_0_os, 0);
            current_statement_begin__ = 173;
            validate_non_negative_index("sigma_0_pfs", "H_pfs", H_pfs);
            context__.validate_dims("data initialization", "sigma_0_pfs", "vector_d", context__.to_vec(H_pfs));
            sigma_0_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_pfs);
            vals_r__ = context__.vals_r("sigma_0_pfs");
            pos__ = 0;
            size_t sigma_0_pfs_j_1_max__ = H_pfs;
            for (size_t j_1__ = 0; j_1__ < sigma_0_pfs_j_1_max__; ++j_1__) {
                sigma_0_pfs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_0_pfs", sigma_0_pfs, 0);
            current_statement_begin__ = 176;
            validate_non_negative_index("mu_bg", "H_os", H_os);
            context__.validate_dims("data initialization", "mu_bg", "vector_d", context__.to_vec(H_os));
            mu_bg = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_os);
            vals_r__ = context__.vals_r("mu_bg");
            pos__ = 0;
            size_t mu_bg_j_1_max__ = H_os;
            for (size_t j_1__ = 0; j_1__ < mu_bg_j_1_max__; ++j_1__) {
                mu_bg(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 177;
            validate_non_negative_index("sigma_bg", "H_os", H_os);
            context__.validate_dims("data initialization", "sigma_bg", "vector_d", context__.to_vec(H_os));
            sigma_bg = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_os);
            vals_r__ = context__.vals_r("sigma_bg");
            pos__ = 0;
            size_t sigma_bg_j_1_max__ = H_os;
            for (size_t j_1__ = 0; j_1__ < sigma_bg_j_1_max__; ++j_1__) {
                sigma_bg(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_bg", sigma_bg, 0);
            current_statement_begin__ = 179;
            context__.validate_dims("data initialization", "mu_joint", "double", context__.to_vec());
            mu_joint = double(0);
            vals_r__ = context__.vals_r("mu_joint");
            pos__ = 0;
            mu_joint = vals_r__[pos__++];
            current_statement_begin__ = 180;
            context__.validate_dims("data initialization", "sigma_joint", "double", context__.to_vec());
            sigma_joint = double(0);
            vals_r__ = context__.vals_r("sigma_joint");
            pos__ = 0;
            sigma_joint = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_joint", sigma_joint, 0);
            current_statement_begin__ = 182;
            context__.validate_dims("data initialization", "a_cf", "double", context__.to_vec());
            a_cf = double(0);
            vals_r__ = context__.vals_r("a_cf");
            pos__ = 0;
            a_cf = vals_r__[pos__++];
            current_statement_begin__ = 183;
            context__.validate_dims("data initialization", "b_cf", "double", context__.to_vec());
            b_cf = double(0);
            vals_r__ = context__.vals_r("b_cf");
            pos__ = 0;
            b_cf = vals_r__[pos__++];
            current_statement_begin__ = 185;
            context__.validate_dims("data initialization", "t_max", "int", context__.to_vec());
            t_max = int(0);
            vals_i__ = context__.vals_i("t_max");
            pos__ = 0;
            t_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "t_max", t_max, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 189;
            validate_non_negative_index("beta_os", "H_os", H_os);
            num_params_r__ += H_os;
            current_statement_begin__ = 190;
            validate_non_negative_index("beta_pfs", "H_pfs", H_pfs);
            num_params_r__ += H_pfs;
            current_statement_begin__ = 191;
            validate_non_negative_index("beta_bg", "H_os", H_os);
            num_params_r__ += H_os;
            current_statement_begin__ = 192;
            num_params_r__ += 1;
            current_statement_begin__ = 194;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_exp_exp_joint_mix() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 189;
        if (!(context__.contains_r("beta_os")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_os missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_os");
        pos__ = 0U;
        validate_non_negative_index("beta_os", "H_os", H_os);
        context__.validate_dims("parameter initialization", "beta_os", "vector_d", context__.to_vec(H_os));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_os(H_os);
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            beta_os(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_os);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_os: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 190;
        if (!(context__.contains_r("beta_pfs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_pfs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_pfs");
        pos__ = 0U;
        validate_non_negative_index("beta_pfs", "H_pfs", H_pfs);
        context__.validate_dims("parameter initialization", "beta_pfs", "vector_d", context__.to_vec(H_pfs));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_pfs(H_pfs);
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            beta_pfs(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_pfs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_pfs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 191;
        if (!(context__.contains_r("beta_bg")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_bg missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_bg");
        pos__ = 0U;
        validate_non_negative_index("beta_bg", "H_os", H_os);
        context__.validate_dims("parameter initialization", "beta_bg", "vector_d", context__.to_vec(H_os));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bg(H_os);
        size_t beta_bg_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            beta_bg(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_bg);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_bg: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 192;
        if (!(context__.contains_r("beta_joint")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_joint missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_joint");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta_joint", "double", context__.to_vec());
        double beta_joint(0);
        beta_joint = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta_joint);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_joint: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 194;
        if (!(context__.contains_r("curefrac")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable curefrac missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("curefrac");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "curefrac", "double", context__.to_vec());
        double curefrac(0);
        curefrac = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, curefrac);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable curefrac: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 189;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_os;
            (void) beta_os;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_os = in__.vector_constrain(H_os, lp__);
            else
                beta_os = in__.vector_constrain(H_os);
            current_statement_begin__ = 190;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_pfs;
            (void) beta_pfs;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_pfs = in__.vector_constrain(H_pfs, lp__);
            else
                beta_pfs = in__.vector_constrain(H_pfs);
            current_statement_begin__ = 191;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_bg;
            (void) beta_bg;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_bg = in__.vector_constrain(H_os, lp__);
            else
                beta_bg = in__.vector_constrain(H_os);
            current_statement_begin__ = 192;
            local_scalar_t__ beta_joint;
            (void) beta_joint;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_joint = in__.scalar_constrain(lp__);
            else
                beta_joint = in__.scalar_constrain();
            current_statement_begin__ = 194;
            local_scalar_t__ curefrac;
            (void) curefrac;  // dummy to suppress unused var warning
            if (jacobian__)
                curefrac = in__.scalar_lub_constrain(0, 1, lp__);
            else
                curefrac = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 198;
            validate_non_negative_index("lp_os", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_os(n_os);
            stan::math::initialize(lp_os, DUMMY_VAR__);
            stan::math::fill(lp_os, DUMMY_VAR__);
            current_statement_begin__ = 199;
            validate_non_negative_index("lp_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_pfs(n_pfs);
            stan::math::initialize(lp_pfs, DUMMY_VAR__);
            stan::math::fill(lp_pfs, DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("lp_os_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_os_bg(n_os);
            stan::math::initialize(lp_os_bg, DUMMY_VAR__);
            stan::math::fill(lp_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("lp_pfs_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_pfs_bg(n_os);
            stan::math::initialize(lp_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lp_pfs_bg, DUMMY_VAR__);
            current_statement_begin__ = 203;
            validate_non_negative_index("lambda_os", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_os(n_os);
            stan::math::initialize(lambda_os, DUMMY_VAR__);
            stan::math::fill(lambda_os, DUMMY_VAR__);
            current_statement_begin__ = 204;
            validate_non_negative_index("lambda_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_pfs(n_pfs);
            stan::math::initialize(lambda_pfs, DUMMY_VAR__);
            stan::math::fill(lambda_pfs, DUMMY_VAR__);
            current_statement_begin__ = 205;
            validate_non_negative_index("lambda_os_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_os_bg(n_os);
            stan::math::initialize(lambda_os_bg, DUMMY_VAR__);
            stan::math::fill(lambda_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 206;
            validate_non_negative_index("lambda_pfs_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_pfs_bg(n_os);
            stan::math::initialize(lambda_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_bg, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 209;
            stan::math::assign(lp_os, add(multiply(X_os, beta_os), multiply(beta_joint, subtract(t_pfs, (1 / stan::math::exp(get_base1(beta_pfs, 1, "beta_pfs", 1)))))));
            current_statement_begin__ = 211;
            stan::math::assign(lp_pfs, multiply(X_pfs, beta_pfs));
            current_statement_begin__ = 213;
            stan::math::assign(lp_os_bg, multiply(X_os, beta_bg));
            current_statement_begin__ = 214;
            stan::math::assign(lp_pfs_bg, multiply(X_pfs, beta_bg));
            current_statement_begin__ = 217;
            stan::math::assign(lambda_os, stan::math::exp(lp_os));
            current_statement_begin__ = 218;
            stan::math::assign(lambda_pfs, stan::math::exp(lp_pfs));
            current_statement_begin__ = 219;
            stan::math::assign(lambda_os_bg, stan::math::exp(lp_os_bg));
            current_statement_begin__ = 220;
            stan::math::assign(lambda_pfs_bg, stan::math::exp(lp_pfs_bg));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 198;
            size_t lp_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_os(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_os" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_os: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 199;
            size_t lp_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_pfs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_pfs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_pfs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 200;
            size_t lp_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_os_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_os_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_os_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 201;
            size_t lp_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_pfs_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_pfs_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_pfs_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 203;
            size_t lambda_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_os(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_os" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_os: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 204;
            size_t lambda_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_pfs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_pfs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_pfs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 205;
            size_t lambda_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_os_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_os_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_os_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 206;
            size_t lambda_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_pfs_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_pfs_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_pfs_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 224;
            lp_accum__.add(normal_log<propto__>(beta_os, mu_0_os, sigma_0_os));
            current_statement_begin__ = 225;
            lp_accum__.add(normal_log<propto__>(beta_pfs, mu_0_pfs, sigma_0_pfs));
            current_statement_begin__ = 226;
            lp_accum__.add(normal_log<propto__>(beta_bg, mu_bg, sigma_bg));
            current_statement_begin__ = 227;
            lp_accum__.add(normal_log<propto__>(beta_joint, mu_joint, sigma_joint));
            current_statement_begin__ = 229;
            lp_accum__.add(beta_log<propto__>(curefrac, a_cf, b_cf));
            current_statement_begin__ = 231;
            for (int i = 1; i <= n_os; ++i) {
                current_statement_begin__ = 232;
                lp_accum__.add((log_sum_exp((stan::math::log(curefrac) + surv_exp_lpdf(get_base1(t_os, i, "t_os", 1), get_base1(d_os, i, "d_os", 1), get_base1(lambda_os_bg, i, "lambda_os_bg", 1), pstream__)), (log1m(curefrac) + surv_exp_lpdf(get_base1(t_os, i, "t_os", 1), get_base1(d_os, i, "d_os", 1), (get_base1(lambda_os_bg, i, "lambda_os_bg", 1) + get_base1(lambda_os, i, "lambda_os", 1)), pstream__))) + log_sum_exp((stan::math::log(curefrac) + surv_exp_lpdf(get_base1(t_pfs, i, "t_pfs", 1), get_base1(d_pfs, i, "d_pfs", 1), get_base1(lambda_pfs_bg, i, "lambda_pfs_bg", 1), pstream__)), (log1m(curefrac) + surv_exp_lpdf(get_base1(t_pfs, i, "t_pfs", 1), get_base1(d_pfs, i, "d_pfs", 1), (get_base1(lambda_pfs_bg, i, "lambda_pfs_bg", 1) + get_base1(lambda_pfs, i, "lambda_pfs", 1)), pstream__)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_os");
        names__.push_back("beta_pfs");
        names__.push_back("beta_bg");
        names__.push_back("beta_joint");
        names__.push_back("curefrac");
        names__.push_back("lp_os");
        names__.push_back("lp_pfs");
        names__.push_back("lp_os_bg");
        names__.push_back("lp_pfs_bg");
        names__.push_back("lambda_os");
        names__.push_back("lambda_pfs");
        names__.push_back("lambda_os_bg");
        names__.push_back("lambda_pfs_bg");
        names__.push_back("mean_os");
        names__.push_back("mean_pfs");
        names__.push_back("mean_bg");
        names__.push_back("S_bg");
        names__.push_back("S_os");
        names__.push_back("S_pfs");
        names__.push_back("S_os_pred");
        names__.push_back("S_pfs_pred");
        names__.push_back("pmean_os");
        names__.push_back("pmean_pfs");
        names__.push_back("pmean_bg");
        names__.push_back("pS_bg");
        names__.push_back("pS_os");
        names__.push_back("pS_pfs");
        names__.push_back("S_os_prior");
        names__.push_back("S_pfs_prior");
        names__.push_back("pbeta_os");
        names__.push_back("pbeta_pfs");
        names__.push_back("pbeta_bg");
        names__.push_back("pcurefrac");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(H_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_pfs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pfs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pfs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_exp_exp_joint_mix_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_os = in__.vector_constrain(H_os);
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            vars__.push_back(beta_os(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_pfs = in__.vector_constrain(H_pfs);
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            vars__.push_back(beta_pfs(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bg = in__.vector_constrain(H_os);
        size_t beta_bg_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            vars__.push_back(beta_bg(j_1__));
        }
        double beta_joint = in__.scalar_constrain();
        vars__.push_back(beta_joint);
        double curefrac = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(curefrac);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 198;
            validate_non_negative_index("lp_os", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_os(n_os);
            stan::math::initialize(lp_os, DUMMY_VAR__);
            stan::math::fill(lp_os, DUMMY_VAR__);
            current_statement_begin__ = 199;
            validate_non_negative_index("lp_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_pfs(n_pfs);
            stan::math::initialize(lp_pfs, DUMMY_VAR__);
            stan::math::fill(lp_pfs, DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("lp_os_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_os_bg(n_os);
            stan::math::initialize(lp_os_bg, DUMMY_VAR__);
            stan::math::fill(lp_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("lp_pfs_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_pfs_bg(n_os);
            stan::math::initialize(lp_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lp_pfs_bg, DUMMY_VAR__);
            current_statement_begin__ = 203;
            validate_non_negative_index("lambda_os", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_os(n_os);
            stan::math::initialize(lambda_os, DUMMY_VAR__);
            stan::math::fill(lambda_os, DUMMY_VAR__);
            current_statement_begin__ = 204;
            validate_non_negative_index("lambda_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_pfs(n_pfs);
            stan::math::initialize(lambda_pfs, DUMMY_VAR__);
            stan::math::fill(lambda_pfs, DUMMY_VAR__);
            current_statement_begin__ = 205;
            validate_non_negative_index("lambda_os_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_os_bg(n_os);
            stan::math::initialize(lambda_os_bg, DUMMY_VAR__);
            stan::math::fill(lambda_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 206;
            validate_non_negative_index("lambda_pfs_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_pfs_bg(n_os);
            stan::math::initialize(lambda_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_bg, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 209;
            stan::math::assign(lp_os, add(multiply(X_os, beta_os), multiply(beta_joint, subtract(t_pfs, (1 / stan::math::exp(get_base1(beta_pfs, 1, "beta_pfs", 1)))))));
            current_statement_begin__ = 211;
            stan::math::assign(lp_pfs, multiply(X_pfs, beta_pfs));
            current_statement_begin__ = 213;
            stan::math::assign(lp_os_bg, multiply(X_os, beta_bg));
            current_statement_begin__ = 214;
            stan::math::assign(lp_pfs_bg, multiply(X_pfs, beta_bg));
            current_statement_begin__ = 217;
            stan::math::assign(lambda_os, stan::math::exp(lp_os));
            current_statement_begin__ = 218;
            stan::math::assign(lambda_pfs, stan::math::exp(lp_pfs));
            current_statement_begin__ = 219;
            stan::math::assign(lambda_os_bg, stan::math::exp(lp_os_bg));
            current_statement_begin__ = 220;
            stan::math::assign(lambda_pfs_bg, stan::math::exp(lp_pfs_bg));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t lp_os_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_os(j_1__));
                }
                size_t lp_pfs_j_1_max__ = n_pfs;
                for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_pfs(j_1__));
                }
                size_t lp_os_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_os_bg(j_1__));
                }
                size_t lp_pfs_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_pfs_bg(j_1__));
                }
                size_t lambda_os_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lambda_os_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_os(j_1__));
                }
                size_t lambda_pfs_j_1_max__ = n_pfs;
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_pfs(j_1__));
                }
                size_t lambda_os_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_os_bg(j_1__));
                }
                size_t lambda_pfs_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_pfs_bg(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 246;
            double mean_os;
            (void) mean_os;  // dummy to suppress unused var warning
            stan::math::initialize(mean_os, DUMMY_VAR__);
            stan::math::fill(mean_os, DUMMY_VAR__);
            current_statement_begin__ = 247;
            double mean_pfs;
            (void) mean_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(mean_pfs, DUMMY_VAR__);
            stan::math::fill(mean_pfs, DUMMY_VAR__);
            current_statement_begin__ = 248;
            double mean_bg;
            (void) mean_bg;  // dummy to suppress unused var warning
            stan::math::initialize(mean_bg, DUMMY_VAR__);
            stan::math::fill(mean_bg, DUMMY_VAR__);
            current_statement_begin__ = 249;
            validate_non_negative_index("S_bg", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_bg(t_max);
            stan::math::initialize(S_bg, DUMMY_VAR__);
            stan::math::fill(S_bg, DUMMY_VAR__);
            current_statement_begin__ = 250;
            validate_non_negative_index("S_os", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_os(t_max);
            stan::math::initialize(S_os, DUMMY_VAR__);
            stan::math::fill(S_os, DUMMY_VAR__);
            current_statement_begin__ = 251;
            validate_non_negative_index("S_pfs", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pfs(t_max);
            stan::math::initialize(S_pfs, DUMMY_VAR__);
            stan::math::fill(S_pfs, DUMMY_VAR__);
            current_statement_begin__ = 252;
            validate_non_negative_index("S_os_pred", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_os_pred(t_max);
            stan::math::initialize(S_os_pred, DUMMY_VAR__);
            stan::math::fill(S_os_pred, DUMMY_VAR__);
            current_statement_begin__ = 253;
            validate_non_negative_index("S_pfs_pred", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pfs_pred(t_max);
            stan::math::initialize(S_pfs_pred, DUMMY_VAR__);
            stan::math::fill(S_pfs_pred, DUMMY_VAR__);
            current_statement_begin__ = 255;
            double pmean_os;
            (void) pmean_os;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_os, DUMMY_VAR__);
            stan::math::fill(pmean_os, DUMMY_VAR__);
            current_statement_begin__ = 256;
            double pmean_pfs;
            (void) pmean_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_pfs, DUMMY_VAR__);
            stan::math::fill(pmean_pfs, DUMMY_VAR__);
            current_statement_begin__ = 257;
            double pmean_bg;
            (void) pmean_bg;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_bg, DUMMY_VAR__);
            stan::math::fill(pmean_bg, DUMMY_VAR__);
            current_statement_begin__ = 260;
            validate_non_negative_index("pS_bg", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pS_bg(t_max);
            stan::math::initialize(pS_bg, DUMMY_VAR__);
            stan::math::fill(pS_bg, DUMMY_VAR__);
            current_statement_begin__ = 261;
            validate_non_negative_index("pS_os", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pS_os(t_max);
            stan::math::initialize(pS_os, DUMMY_VAR__);
            stan::math::fill(pS_os, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("pS_pfs", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pS_pfs(t_max);
            stan::math::initialize(pS_pfs, DUMMY_VAR__);
            stan::math::fill(pS_pfs, DUMMY_VAR__);
            current_statement_begin__ = 263;
            validate_non_negative_index("S_os_prior", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_os_prior(t_max);
            stan::math::initialize(S_os_prior, DUMMY_VAR__);
            stan::math::fill(S_os_prior, DUMMY_VAR__);
            current_statement_begin__ = 264;
            validate_non_negative_index("S_pfs_prior", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pfs_prior(t_max);
            stan::math::initialize(S_pfs_prior, DUMMY_VAR__);
            stan::math::fill(S_pfs_prior, DUMMY_VAR__);
            current_statement_begin__ = 266;
            double pbeta_os;
            (void) pbeta_os;  // dummy to suppress unused var warning
            stan::math::initialize(pbeta_os, DUMMY_VAR__);
            stan::math::fill(pbeta_os, DUMMY_VAR__);
            stan::math::assign(pbeta_os,normal_rng(get_base1(mu_0_os, 1, "mu_0_os", 1), get_base1(sigma_0_os, 1, "sigma_0_os", 1), base_rng__));
            current_statement_begin__ = 267;
            double pbeta_pfs;
            (void) pbeta_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pbeta_pfs, DUMMY_VAR__);
            stan::math::fill(pbeta_pfs, DUMMY_VAR__);
            stan::math::assign(pbeta_pfs,normal_rng(get_base1(mu_0_pfs, 1, "mu_0_pfs", 1), get_base1(sigma_0_pfs, 1, "sigma_0_pfs", 1), base_rng__));
            current_statement_begin__ = 268;
            double pbeta_bg;
            (void) pbeta_bg;  // dummy to suppress unused var warning
            stan::math::initialize(pbeta_bg, DUMMY_VAR__);
            stan::math::fill(pbeta_bg, DUMMY_VAR__);
            stan::math::assign(pbeta_bg,normal_rng(get_base1(mu_bg, 1, "mu_bg", 1), get_base1(sigma_bg, 1, "sigma_bg", 1), base_rng__));
            current_statement_begin__ = 269;
            double pcurefrac;
            (void) pcurefrac;  // dummy to suppress unused var warning
            stan::math::initialize(pcurefrac, DUMMY_VAR__);
            stan::math::fill(pcurefrac, DUMMY_VAR__);
            stan::math::assign(pcurefrac,beta_rng(a_cf, b_cf, base_rng__));
            // generated quantities statements
            current_statement_begin__ = 272;
            stan::math::assign(mean_os, stan::math::exp(get_base1(beta_os, 1, "beta_os", 1)));
            current_statement_begin__ = 273;
            stan::math::assign(mean_pfs, stan::math::exp(get_base1(beta_pfs, 1, "beta_pfs", 1)));
            current_statement_begin__ = 274;
            stan::math::assign(mean_bg, stan::math::exp(get_base1(beta_bg, 1, "beta_bg", 1)));
            current_statement_begin__ = 276;
            for (int i = 1; i <= t_max; ++i) {
                current_statement_begin__ = 277;
                stan::model::assign(S_bg, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, mean_bg, pstream__), 
                            "assigning variable S_bg");
                current_statement_begin__ = 278;
                stan::model::assign(S_os, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, (mean_bg + mean_os), pstream__), 
                            "assigning variable S_os");
                current_statement_begin__ = 279;
                stan::model::assign(S_pfs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, (mean_bg + mean_pfs), pstream__), 
                            "assigning variable S_pfs");
                current_statement_begin__ = 281;
                stan::model::assign(S_os_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((curefrac * get_base1(S_bg, i, "S_bg", 1)) + ((1 - curefrac) * get_base1(S_os, i, "S_os", 1))), 
                            "assigning variable S_os_pred");
                current_statement_begin__ = 282;
                stan::model::assign(S_pfs_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((curefrac * get_base1(S_bg, i, "S_bg", 1)) + ((1 - curefrac) * get_base1(S_pfs, i, "S_pfs", 1))), 
                            "assigning variable S_pfs_pred");
            }
            current_statement_begin__ = 286;
            stan::math::assign(pmean_os, stan::math::exp(pbeta_os));
            current_statement_begin__ = 287;
            stan::math::assign(pmean_pfs, stan::math::exp(pbeta_pfs));
            current_statement_begin__ = 288;
            stan::math::assign(pmean_bg, stan::math::exp(pbeta_bg));
            current_statement_begin__ = 296;
            for (int i = 1; i <= t_max; ++i) {
                current_statement_begin__ = 297;
                stan::model::assign(pS_bg, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, pmean_bg, pstream__), 
                            "assigning variable pS_bg");
                current_statement_begin__ = 298;
                stan::model::assign(pS_os, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, (pmean_bg + pmean_os), pstream__), 
                            "assigning variable pS_os");
                current_statement_begin__ = 299;
                stan::model::assign(pS_pfs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, (pmean_bg + pmean_pfs), pstream__), 
                            "assigning variable pS_pfs");
                current_statement_begin__ = 301;
                stan::model::assign(S_os_prior, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((pcurefrac * get_base1(pS_bg, i, "pS_bg", 1)) + ((1 - pcurefrac) * get_base1(pS_os, i, "pS_os", 1))), 
                            "assigning variable S_os_prior");
                current_statement_begin__ = 302;
                stan::model::assign(S_pfs_prior, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((pcurefrac * get_base1(pS_bg, i, "pS_bg", 1)) + ((1 - pcurefrac) * get_base1(pS_pfs, i, "pS_pfs", 1))), 
                            "assigning variable S_pfs_prior");
            }
            // validate, write generated quantities
            current_statement_begin__ = 246;
            vars__.push_back(mean_os);
            current_statement_begin__ = 247;
            vars__.push_back(mean_pfs);
            current_statement_begin__ = 248;
            vars__.push_back(mean_bg);
            current_statement_begin__ = 249;
            size_t S_bg_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
                vars__.push_back(S_bg(j_1__));
            }
            current_statement_begin__ = 250;
            size_t S_os_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_os_j_1_max__; ++j_1__) {
                vars__.push_back(S_os(j_1__));
            }
            current_statement_begin__ = 251;
            size_t S_pfs_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_pfs_j_1_max__; ++j_1__) {
                vars__.push_back(S_pfs(j_1__));
            }
            current_statement_begin__ = 252;
            size_t S_os_pred_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_os_pred_j_1_max__; ++j_1__) {
                vars__.push_back(S_os_pred(j_1__));
            }
            current_statement_begin__ = 253;
            size_t S_pfs_pred_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_pfs_pred_j_1_max__; ++j_1__) {
                vars__.push_back(S_pfs_pred(j_1__));
            }
            current_statement_begin__ = 255;
            vars__.push_back(pmean_os);
            current_statement_begin__ = 256;
            vars__.push_back(pmean_pfs);
            current_statement_begin__ = 257;
            vars__.push_back(pmean_bg);
            current_statement_begin__ = 260;
            size_t pS_bg_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < pS_bg_j_1_max__; ++j_1__) {
                vars__.push_back(pS_bg(j_1__));
            }
            current_statement_begin__ = 261;
            size_t pS_os_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < pS_os_j_1_max__; ++j_1__) {
                vars__.push_back(pS_os(j_1__));
            }
            current_statement_begin__ = 262;
            size_t pS_pfs_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < pS_pfs_j_1_max__; ++j_1__) {
                vars__.push_back(pS_pfs(j_1__));
            }
            current_statement_begin__ = 263;
            size_t S_os_prior_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_os_prior_j_1_max__; ++j_1__) {
                vars__.push_back(S_os_prior(j_1__));
            }
            current_statement_begin__ = 264;
            size_t S_pfs_prior_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_pfs_prior_j_1_max__; ++j_1__) {
                vars__.push_back(S_pfs_prior(j_1__));
            }
            current_statement_begin__ = 266;
            vars__.push_back(pbeta_os);
            current_statement_begin__ = 267;
            vars__.push_back(pbeta_pfs);
            current_statement_begin__ = 268;
            vars__.push_back(pbeta_bg);
            current_statement_begin__ = 269;
            vars__.push_back(pcurefrac);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_exp_exp_joint_mix";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bg_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_joint";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "curefrac";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t lp_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t S_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t pS_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_bg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pcurefrac";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bg_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_joint";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "curefrac";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t lp_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t S_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t pS_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_bg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pcurefrac";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_exp_exp_joint_mix_namespace::model_exp_exp_joint_mix stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
