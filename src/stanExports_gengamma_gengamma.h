// Generated by rstantools.  Do not edit by hand.

/*
    rstanbmcm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanbmcm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanbmcm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_gengamma_gengamma_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gengamma_gengamma");
    reader.add_event(5, 5, "include", "/include/distributions.stan");
    reader.add_event(5, 0, "start", "/include/distributions.stan");
    reader.add_event(465, 460, "end", "/include/distributions.stan");
    reader.add_event(465, 6, "restart", "model_gengamma_gengamma");
    reader.add_event(763, 302, "end", "model_gengamma_gengamma");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
normal_pdf(const T0__& t,
               const T1__& mu,
               const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        local_scalar_t__ pdf(DUMMY_VAR__);
        (void) pdf;  // dummy to suppress unused var warning
        stan::math::initialize(pdf, DUMMY_VAR__);
        stan::math::fill(pdf, DUMMY_VAR__);
        current_statement_begin__ = 10;
        stan::math::assign(pdf, ((1 / (sigma * stan::math::sqrt((2 * stan::math::pi())))) * stan::math::exp((-(0.5) * pow(((t - mu) / sigma), 2)))));
        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(pdf);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct normal_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
               const T1__& mu,
               const T2__& sigma, std::ostream* pstream__) const {
        return normal_pdf(t, mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_log_h(const T0__& t,
              const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 25;
        local_scalar_t__ logh(DUMMY_VAR__);
        (void) logh;  // dummy to suppress unused var warning
        stan::math::initialize(logh, DUMMY_VAR__);
        stan::math::fill(logh, DUMMY_VAR__);
        current_statement_begin__ = 26;
        stan::math::assign(logh, stan::math::log(rate));
        current_statement_begin__ = 27;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_log_h_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
              const T1__& rate, std::ostream* pstream__) const {
        return exp_log_h(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_haz(const T0__& t,
            const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 32;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 33;
        stan::math::assign(h, rate);
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_haz_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
            const T1__& rate, std::ostream* pstream__) const {
        return exp_haz(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_log_S(const T0__& t,
              const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 40;
        local_scalar_t__ logS(DUMMY_VAR__);
        (void) logS;  // dummy to suppress unused var warning
        stan::math::initialize(logS, DUMMY_VAR__);
        stan::math::fill(logS, DUMMY_VAR__);
        current_statement_begin__ = 41;
        stan::math::assign(logS, (-(rate) * t));
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_log_S_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
              const T1__& rate, std::ostream* pstream__) const {
        return exp_log_S(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_Surv(const T0__& t,
             const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 47;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 48;
        stan::math::assign(S, stan::math::exp((-(rate) * t)));
        current_statement_begin__ = 49;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_Surv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
             const T1__& rate, std::ostream* pstream__) const {
        return exp_Surv(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_pdf(const T0__& t,
                 const T1__& d,
                 const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 54;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 55;
        stan::math::assign(lik, (pow(exp_haz(t, rate, pstream__), d) * exp_Surv(t, rate, pstream__)));
        current_statement_begin__ = 56;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct surv_exp_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& d,
                 const T2__& rate, std::ostream* pstream__) const {
        return surv_exp_pdf(t, d, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_lpdf(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 62;
        stan::math::assign(log_lik, ((d * exp_log_h(t, rate, pstream__)) + exp_log_S(t, rate, pstream__)));
        current_statement_begin__ = 63;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_lpdf(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) {
    return surv_exp_lpdf<false>(t,d,rate, pstream__);
}
struct surv_exp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) const {
        return surv_exp_lpdf(t, d, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_log_h(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 77;
        local_scalar_t__ logh(DUMMY_VAR__);
        (void) logh;  // dummy to suppress unused var warning
        stan::math::initialize(logh, DUMMY_VAR__);
        stan::math::fill(logh, DUMMY_VAR__);
        current_statement_begin__ = 78;
        stan::math::assign(logh, ((stan::math::log(shape) + ((shape - 1) * stan::math::log((t / scale)))) - stan::math::log(scale)));
        current_statement_begin__ = 79;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return weibull_log_h(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_haz(const T0__& t,
                const T1__& shape,
                const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 84;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 85;
        stan::math::assign(h, ((shape / scale) * pow((t / scale), (shape - 1))));
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                const T1__& shape,
                const T2__& scale, std::ostream* pstream__) const {
        return weibull_haz(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_log_S(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 92;
        local_scalar_t__ logS(DUMMY_VAR__);
        (void) logS;  // dummy to suppress unused var warning
        stan::math::initialize(logS, DUMMY_VAR__);
        stan::math::fill(logS, DUMMY_VAR__);
        current_statement_begin__ = 93;
        stan::math::assign(logS, -(pow((t / scale), shape)));
        current_statement_begin__ = 94;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return weibull_log_S(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_Surv(const T0__& t,
                 const T1__& shape,
                 const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 99;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 100;
        stan::math::assign(S, stan::math::exp(-(pow((t / scale), shape))));
        current_statement_begin__ = 101;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& shape,
                 const T2__& scale, std::ostream* pstream__) const {
        return weibull_Surv(t, shape, scale, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_weibull_lpdf(const T0__& t,
                      const T1__& d,
                      const T2__& shape,
                      const T3__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 106;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 107;
        stan::math::assign(log_lik, ((d * weibull_log_h(t, shape, scale, pstream__)) + weibull_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 108;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_weibull_lpdf(const T0__& t,
                      const T1__& d,
                      const T2__& shape,
                      const T3__& scale, std::ostream* pstream__) {
    return surv_weibull_lpdf<false>(t,d,shape,scale, pstream__);
}
struct surv_weibull_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                      const T1__& d,
                      const T2__& shape,
                      const T3__& scale, std::ostream* pstream__) const {
        return surv_weibull_lpdf(t, d, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_log_h(const T0__& t,
                   const T1__& shape,
                   const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 122;
        local_scalar_t__ log_h(DUMMY_VAR__);
        (void) log_h;  // dummy to suppress unused var warning
        stan::math::initialize(log_h, DUMMY_VAR__);
        stan::math::fill(log_h, DUMMY_VAR__);
        current_statement_begin__ = 123;
        stan::math::assign(log_h, (stan::math::log(scale) + (shape * t)));
        current_statement_begin__ = 124;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& shape,
                   const T2__& scale, std::ostream* pstream__) const {
        return gompertz_log_h(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_haz(const T0__& t,
                 const T1__& shape,
                 const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 129;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 130;
        stan::math::assign(h, (scale * stan::math::exp((shape * t))));
        current_statement_begin__ = 131;
        return stan::math::promote_scalar<fun_return_scalar_t__>(h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& shape,
                 const T2__& scale, std::ostream* pstream__) const {
        return gompertz_haz(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_log_S(const T0__& t,
                   const T1__& shape,
                   const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 136;
        local_scalar_t__ log_S(DUMMY_VAR__);
        (void) log_S;  // dummy to suppress unused var warning
        stan::math::initialize(log_S, DUMMY_VAR__);
        stan::math::fill(log_S, DUMMY_VAR__);
        current_statement_begin__ = 137;
        stan::math::assign(log_S, ((-(scale) / shape) * (stan::math::exp((shape * t)) - 1)));
        current_statement_begin__ = 138;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& shape,
                   const T2__& scale, std::ostream* pstream__) const {
        return gompertz_log_S(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_Surv(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 143;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 144;
        stan::math::assign(S, stan::math::exp(((-(scale) / shape) * (stan::math::exp((shape * t)) - 1))));
        current_statement_begin__ = 145;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return gompertz_Surv(t, shape, scale, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_gompertz_lpdf(const T0__& t,
                       const T1__& d,
                       const T2__& shape,
                       const T3__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 150;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 151;
        stan::math::assign(log_lik, ((d * gompertz_log_h(t, shape, scale, pstream__)) + gompertz_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 152;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_gompertz_lpdf(const T0__& t,
                       const T1__& d,
                       const T2__& shape,
                       const T3__& scale, std::ostream* pstream__) {
    return surv_gompertz_lpdf<false>(t,d,shape,scale, pstream__);
}
struct surv_gompertz_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                       const T1__& d,
                       const T2__& shape,
                       const T3__& scale, std::ostream* pstream__) const {
        return surv_gompertz_lpdf(t, d, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
inv_cdf_gompertz(const T0__& p,
                     const T1__& shape,
                     const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 157;
        local_scalar_t__ res(DUMMY_VAR__);
        (void) res;  // dummy to suppress unused var warning
        stan::math::initialize(res, DUMMY_VAR__);
        stan::math::fill(res, DUMMY_VAR__);
        current_statement_begin__ = 158;
        stan::math::assign(res, ((1 / shape) * stan::math::log((1 + ((-(shape) / scale) * stan::math::log((1 - p)))))));
        current_statement_begin__ = 159;
        return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct inv_cdf_gompertz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& p,
                     const T1__& shape,
                     const T2__& scale, std::ostream* pstream__) const {
        return inv_cdf_gompertz(p, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
loglogistic_log_h(const T0__& t,
                      const T1__& shape,
                      const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 181;
        local_scalar_t__ log_h(DUMMY_VAR__);
        (void) log_h;  // dummy to suppress unused var warning
        stan::math::initialize(log_h, DUMMY_VAR__);
        stan::math::fill(log_h, DUMMY_VAR__);
        current_statement_begin__ = 182;
        stan::math::assign(log_h, (((stan::math::log(shape) - stan::math::log(scale)) + ((shape - 1) * (stan::math::log(t) - stan::math::log(scale)))) - stan::math::log((1 + pow((t / scale), shape)))));
        current_statement_begin__ = 185;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglogistic_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                      const T1__& shape,
                      const T2__& scale, std::ostream* pstream__) const {
        return loglogistic_log_h(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
loglogistic_haz(const T0__& t,
                    const T1__& shape,
                    const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 190;
        local_scalar_t__ haz(DUMMY_VAR__);
        (void) haz;  // dummy to suppress unused var warning
        stan::math::initialize(haz, DUMMY_VAR__);
        stan::math::fill(haz, DUMMY_VAR__);
        current_statement_begin__ = 191;
        stan::math::assign(haz, (((shape / scale) * pow((t / scale), (shape - 1))) / (1 + pow((t / scale), shape))));
        current_statement_begin__ = 193;
        return stan::math::promote_scalar<fun_return_scalar_t__>(haz);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglogistic_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                    const T1__& shape,
                    const T2__& scale, std::ostream* pstream__) const {
        return loglogistic_haz(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
loglogistic_log_S(const T0__& t,
                      const T1__& shape,
                      const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 198;
        local_scalar_t__ log_S(DUMMY_VAR__);
        (void) log_S;  // dummy to suppress unused var warning
        stan::math::initialize(log_S, DUMMY_VAR__);
        stan::math::fill(log_S, DUMMY_VAR__);
        current_statement_begin__ = 199;
        stan::math::assign(log_S, -(stan::math::log((1 + pow((t / scale), shape)))));
        current_statement_begin__ = 200;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglogistic_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                      const T1__& shape,
                      const T2__& scale, std::ostream* pstream__) const {
        return loglogistic_log_S(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
loglogistic_Surv(const T0__& t,
                     const T1__& shape,
                     const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 205;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 206;
        stan::math::assign(Surv, (1 / (1 + pow((t / scale), shape))));
        current_statement_begin__ = 207;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loglogistic_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                     const T1__& shape,
                     const T2__& scale, std::ostream* pstream__) const {
        return loglogistic_Surv(t, shape, scale, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_loglogistic_lpdf(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 212;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 213;
        stan::math::assign(log_lik, ((d * loglogistic_log_h(t, shape, scale, pstream__)) + loglogistic_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 214;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_loglogistic_lpdf(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale, std::ostream* pstream__) {
    return surv_loglogistic_lpdf<false>(t,d,shape,scale, pstream__);
}
struct surv_loglogistic_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale, std::ostream* pstream__) const {
        return surv_loglogistic_lpdf(t, d, shape, scale, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gen_gamma_lpdf(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma,
                   const T3__& Q, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 229;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 230;
        local_scalar_t__ w(DUMMY_VAR__);
        (void) w;  // dummy to suppress unused var warning
        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w, DUMMY_VAR__);
        current_statement_begin__ = 231;
        stan::math::assign(w, ((stan::math::log(t) - mu) / sigma));
        current_statement_begin__ = 232;
        stan::math::assign(prob, ((((-(stan::math::log((sigma * t))) + stan::math::log(stan::math::fabs(Q))) + (pow(Q, -(2)) * stan::math::log(pow(Q, -(2))))) + (pow(Q, -(2)) * ((Q * w) - stan::math::exp((Q * w))))) - stan::math::lgamma(pow(Q, -(2)))));
        current_statement_begin__ = 233;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gen_gamma_lpdf(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma,
                   const T3__& Q, std::ostream* pstream__) {
    return gen_gamma_lpdf<false>(t,mu,sigma,Q, pstream__);
}
struct gen_gamma_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma,
                   const T3__& Q, std::ostream* pstream__) const {
        return gen_gamma_lpdf(t, mu, sigma, Q, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gen_gamma_Surv(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma,
                   const T3__& Q, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 237;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 238;
        local_scalar_t__ w(DUMMY_VAR__);
        (void) w;  // dummy to suppress unused var warning
        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w, DUMMY_VAR__);
        stan::math::assign(w,((stan::math::log(t) - mu) / sigma));
        current_statement_begin__ = 239;
        local_scalar_t__ qq(DUMMY_VAR__);
        (void) qq;  // dummy to suppress unused var warning
        stan::math::initialize(qq, DUMMY_VAR__);
        stan::math::fill(qq, DUMMY_VAR__);
        stan::math::assign(qq,(1 / (Q * Q)));
        current_statement_begin__ = 240;
        local_scalar_t__ expnu(DUMMY_VAR__);
        (void) expnu;  // dummy to suppress unused var warning
        stan::math::initialize(expnu, DUMMY_VAR__);
        stan::math::fill(expnu, DUMMY_VAR__);
        stan::math::assign(expnu,(stan::math::exp((Q * w)) * qq));
        current_statement_begin__ = 241;
        stan::math::assign(Surv, (1 - gamma_cdf(expnu, qq, 1)));
        current_statement_begin__ = 242;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gen_gamma_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma,
                   const T3__& Q, std::ostream* pstream__) const {
        return gen_gamma_Surv(t, mu, sigma, Q, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gen_gamma_log_S(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma,
                    const T3__& Q, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 246;
        local_scalar_t__ log_S(DUMMY_VAR__);
        (void) log_S;  // dummy to suppress unused var warning
        stan::math::initialize(log_S, DUMMY_VAR__);
        stan::math::fill(log_S, DUMMY_VAR__);
        current_statement_begin__ = 247;
        stan::math::assign(log_S, stan::math::log(gen_gamma_Surv(t, mu, sigma, Q, pstream__)));
        current_statement_begin__ = 248;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gen_gamma_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma,
                    const T3__& Q, std::ostream* pstream__) const {
        return gen_gamma_log_S(t, mu, sigma, Q, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gen_gamma_log_h(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma,
                    const T3__& Q, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 252;
        local_scalar_t__ log_h(DUMMY_VAR__);
        (void) log_h;  // dummy to suppress unused var warning
        stan::math::initialize(log_h, DUMMY_VAR__);
        stan::math::fill(log_h, DUMMY_VAR__);
        current_statement_begin__ = 253;
        stan::math::assign(log_h, (gen_gamma_lpdf(t, mu, sigma, Q, pstream__) - gen_gamma_log_S(t, mu, sigma, Q, pstream__)));
        current_statement_begin__ = 254;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gen_gamma_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma,
                    const T3__& Q, std::ostream* pstream__) const {
        return gen_gamma_log_h(t, mu, sigma, Q, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
gen_gamma_haz(const T0__& t,
                  const T1__& mu,
                  const T2__& sigma,
                  const T3__& Q, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 258;
        local_scalar_t__ haz(DUMMY_VAR__);
        (void) haz;  // dummy to suppress unused var warning
        stan::math::initialize(haz, DUMMY_VAR__);
        stan::math::fill(haz, DUMMY_VAR__);
        current_statement_begin__ = 259;
        stan::math::assign(haz, stan::math::exp(gen_gamma_log_h(t, mu, sigma, Q, pstream__)));
        current_statement_begin__ = 260;
        return stan::math::promote_scalar<fun_return_scalar_t__>(haz);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gen_gamma_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                  const T1__& mu,
                  const T2__& sigma,
                  const T3__& Q, std::ostream* pstream__) const {
        return gen_gamma_haz(t, mu, sigma, Q, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
surv_gen_gamma_lpdf(const T0__& t,
                        const T1__& d,
                        const T2__& mu,
                        const T3__& sigma,
                        const T4__& Q, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 265;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 266;
        local_scalar_t__ w(DUMMY_VAR__);
        (void) w;  // dummy to suppress unused var warning
        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w, DUMMY_VAR__);
        current_statement_begin__ = 267;
        local_scalar_t__ tr(DUMMY_VAR__);
        (void) tr;  // dummy to suppress unused var warning
        stan::math::initialize(tr, DUMMY_VAR__);
        stan::math::fill(tr, DUMMY_VAR__);
        current_statement_begin__ = 268;
        stan::math::assign(tr, (t * d));
        current_statement_begin__ = 269;
        stan::math::assign(w, ((stan::math::log(tr) - mu) / sigma));
        current_statement_begin__ = 270;
        stan::math::assign(prob, (((((stan::math::log(d) - stan::math::log((sigma * tr))) + stan::math::log(stan::math::fabs(Q))) + (pow(Q, -(2)) * stan::math::log(pow(Q, -(2))))) + (pow(Q, -(2)) * ((Q * w) - stan::math::exp((Q * w))))) - stan::math::lgamma(pow(Q, -(2)))));
        current_statement_begin__ = 271;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
surv_gen_gamma_lpdf(const T0__& t,
                        const T1__& d,
                        const T2__& mu,
                        const T3__& sigma,
                        const T4__& Q, std::ostream* pstream__) {
    return surv_gen_gamma_lpdf<false>(t,d,mu,sigma,Q, pstream__);
}
struct surv_gen_gamma_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                        const T1__& d,
                        const T2__& mu,
                        const T3__& sigma,
                        const T4__& Q, std::ostream* pstream__) const {
        return surv_gen_gamma_lpdf(t, d, mu, sigma, Q, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
lognormal_log_S(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 286;
        local_scalar_t__ log_S(DUMMY_VAR__);
        (void) log_S;  // dummy to suppress unused var warning
        stan::math::initialize(log_S, DUMMY_VAR__);
        stan::math::fill(log_S, DUMMY_VAR__);
        current_statement_begin__ = 287;
        stan::math::assign(log_S, stan::math::log((1 - Phi(((stan::math::log(t) - mu) / sigma)))));
        current_statement_begin__ = 288;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lognormal_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma, std::ostream* pstream__) const {
        return lognormal_log_S(t, mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
lognormal_log_h(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 293;
        local_scalar_t__ log_h(DUMMY_VAR__);
        (void) log_h;  // dummy to suppress unused var warning
        stan::math::initialize(log_h, DUMMY_VAR__);
        stan::math::fill(log_h, DUMMY_VAR__);
        current_statement_begin__ = 295;
        stan::math::assign(log_h, (lognormal_log(t, mu, sigma) - lognormal_ccdf_log(t, mu, sigma)));
        current_statement_begin__ = 296;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lognormal_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                    const T1__& mu,
                    const T2__& sigma, std::ostream* pstream__) const {
        return lognormal_log_h(t, mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
lognormal_Surv(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 302;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 303;
        stan::math::assign(Surv, (1 - Phi(((stan::math::log(t) - mu) / sigma))));
        current_statement_begin__ = 304;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lognormal_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& mu,
                   const T2__& sigma, std::ostream* pstream__) const {
        return lognormal_Surv(t, mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
lognormal_haz(const T0__& t,
                  const T1__& mu,
                  const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 309;
        local_scalar_t__ haz(DUMMY_VAR__);
        (void) haz;  // dummy to suppress unused var warning
        stan::math::initialize(haz, DUMMY_VAR__);
        stan::math::fill(haz, DUMMY_VAR__);
        current_statement_begin__ = 310;
        stan::math::assign(haz, (((1 / (t * sigma)) * normal_pdf(stan::math::log(t), mu, sigma, pstream__)) / (1 - Phi(((stan::math::log(t) - mu) / sigma)))));
        current_statement_begin__ = 311;
        return stan::math::promote_scalar<fun_return_scalar_t__>(haz);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct lognormal_haz_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& mu,
                  const T2__& sigma, std::ostream* pstream__) const {
        return lognormal_haz(t, mu, sigma, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_lognormal_pdf(const T0__& t,
                       const T1__& d,
                       const T2__& mu,
                       const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 316;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 317;
        stan::math::assign(lik, (pow(lognormal_haz(t, mu, sigma, pstream__), d) * lognormal_Surv(t, mu, sigma, pstream__)));
        current_statement_begin__ = 318;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct surv_lognormal_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                       const T1__& d,
                       const T2__& mu,
                       const T3__& sigma, std::ostream* pstream__) const {
        return surv_lognormal_pdf(t, d, mu, sigma, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_lognormal_lpdf(const T0__& t,
                        const T1__& d,
                        const T2__& mu,
                        const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 322;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 323;
        stan::math::assign(log_lik, ((d * lognormal_log_h(t, mu, sigma, pstream__)) + lognormal_log_S(t, mu, sigma, pstream__)));
        current_statement_begin__ = 324;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_lognormal_lpdf(const T0__& t,
                        const T1__& d,
                        const T2__& mu,
                        const T3__& sigma, std::ostream* pstream__) {
    return surv_lognormal_lpdf<false>(t,d,mu,sigma, pstream__);
}
struct surv_lognormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                        const T1__& d,
                        const T2__& mu,
                        const T3__& sigma, std::ostream* pstream__) const {
        return surv_lognormal_lpdf(t, d, mu, sigma, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
joint_exp_exp_lpdf(const T0__& t,
                       const T1__& d,
                       const T2__& rate1,
                       const T3__& rate2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 335;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 336;
        stan::math::assign(lik, surv_exp_lpdf(t, d, (rate1 + rate2), pstream__));
        current_statement_begin__ = 337;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
joint_exp_exp_lpdf(const T0__& t,
                       const T1__& d,
                       const T2__& rate1,
                       const T3__& rate2, std::ostream* pstream__) {
    return joint_exp_exp_lpdf<false>(t,d,rate1,rate2, pstream__);
}
struct joint_exp_exp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                       const T1__& d,
                       const T2__& rate1,
                       const T3__& rate2, std::ostream* pstream__) const {
        return joint_exp_exp_lpdf(t, d, rate1, rate2, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
exp_exp_Surv(const T0__& t,
                 const T1__& rate1,
                 const T2__& rate2, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 341;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 342;
        stan::math::assign(Surv, (exp_Surv(t, rate1, pstream__) * exp_Surv(t, rate2, pstream__)));
        current_statement_begin__ = 343;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_exp_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& rate1,
                 const T2__& rate2, std::ostream* pstream__) const {
        return exp_exp_Surv(t, rate1, rate2, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_weibull_pdf(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale,
                          const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 349;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 350;
        stan::math::assign(lik, ((exp_Surv(t, rate, pstream__) * weibull_Surv(t, shape, scale, pstream__)) * pow((exp_haz(t, rate, pstream__) + weibull_haz(t, shape, scale, pstream__)), d)));
        current_statement_begin__ = 352;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct joint_exp_weibull_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                          const T1__& d,
                          const T2__& shape,
                          const T3__& scale,
                          const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_weibull_pdf(t, d, shape, scale, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_weibull_lpdf(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 356;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 357;
        stan::math::assign(log_lik, (((d * stan::math::log((exp_haz(t, rate, pstream__) + weibull_haz(t, shape, scale, pstream__)))) + exp_log_S(t, rate, pstream__)) + weibull_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 359;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_weibull_lpdf(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) {
    return joint_exp_weibull_lpdf<false>(t,d,shape,scale,rate, pstream__);
}
struct joint_exp_weibull_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_weibull_lpdf(t, d, shape, scale, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
exp_weibull_Surv(const T0__& t,
                     const T1__& shape,
                     const T2__& scale,
                     const T3__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 363;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 364;
        stan::math::assign(Surv, (exp_Surv(t, rate, pstream__) * weibull_Surv(t, shape, scale, pstream__)));
        current_statement_begin__ = 365;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_weibull_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                     const T1__& shape,
                     const T2__& scale,
                     const T3__& rate, std::ostream* pstream__) const {
        return exp_weibull_Surv(t, shape, scale, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_gompertz_pdf(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 371;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 372;
        stan::math::assign(lik, ((exp_Surv(t, rate, pstream__) * gompertz_Surv(t, shape, scale, pstream__)) * pow((exp_haz(t, rate, pstream__) + gompertz_haz(t, shape, scale, pstream__)), d)));
        current_statement_begin__ = 374;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct joint_exp_gompertz_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                           const T1__& d,
                           const T2__& shape,
                           const T3__& scale,
                           const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_gompertz_pdf(t, d, shape, scale, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_gompertz_lpdf(const T0__& t,
                            const T1__& d,
                            const T2__& shape,
                            const T3__& scale,
                            const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 378;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 379;
        stan::math::assign(log_lik, (((d * stan::math::log((exp_haz(t, rate, pstream__) + gompertz_haz(t, shape, scale, pstream__)))) + exp_log_S(t, rate, pstream__)) + gompertz_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 381;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_gompertz_lpdf(const T0__& t,
                            const T1__& d,
                            const T2__& shape,
                            const T3__& scale,
                            const T4__& rate, std::ostream* pstream__) {
    return joint_exp_gompertz_lpdf<false>(t,d,shape,scale,rate, pstream__);
}
struct joint_exp_gompertz_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                            const T1__& d,
                            const T2__& shape,
                            const T3__& scale,
                            const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_gompertz_lpdf(t, d, shape, scale, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
exp_gompertz_Surv(const T0__& t,
                      const T1__& shape,
                      const T2__& scale,
                      const T3__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 385;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 386;
        stan::math::assign(Surv, (exp_Surv(t, rate, pstream__) * gompertz_Surv(t, shape, scale, pstream__)));
        current_statement_begin__ = 387;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_gompertz_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                      const T1__& shape,
                      const T2__& scale,
                      const T3__& rate, std::ostream* pstream__) const {
        return exp_gompertz_Surv(t, shape, scale, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_loglogistic_pdf(const T0__& t,
                              const T1__& d,
                              const T2__& shape,
                              const T3__& scale,
                              const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 393;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 394;
        stan::math::assign(lik, ((exp_Surv(t, rate, pstream__) * loglogistic_Surv(t, shape, scale, pstream__)) * pow((exp_haz(t, rate, pstream__) + loglogistic_haz(t, shape, scale, pstream__)), d)));
        current_statement_begin__ = 396;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct joint_exp_loglogistic_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                              const T1__& d,
                              const T2__& shape,
                              const T3__& scale,
                              const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_loglogistic_pdf(t, d, shape, scale, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_loglogistic_lpdf(const T0__& t,
                               const T1__& d,
                               const T2__& shape,
                               const T3__& scale,
                               const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 400;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 401;
        stan::math::assign(log_lik, (((d * stan::math::log((exp_haz(t, rate, pstream__) + loglogistic_haz(t, shape, scale, pstream__)))) + exp_log_S(t, rate, pstream__)) + loglogistic_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 403;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_loglogistic_lpdf(const T0__& t,
                               const T1__& d,
                               const T2__& shape,
                               const T3__& scale,
                               const T4__& rate, std::ostream* pstream__) {
    return joint_exp_loglogistic_lpdf<false>(t,d,shape,scale,rate, pstream__);
}
struct joint_exp_loglogistic_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                               const T1__& d,
                               const T2__& shape,
                               const T3__& scale,
                               const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_loglogistic_lpdf(t, d, shape, scale, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
exp_loglogistic_Surv(const T0__& t,
                         const T1__& shape,
                         const T2__& scale,
                         const T3__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 407;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 408;
        stan::math::assign(Surv, (exp_Surv(t, rate, pstream__) * loglogistic_Surv(t, shape, scale, pstream__)));
        current_statement_begin__ = 409;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_loglogistic_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                         const T1__& shape,
                         const T2__& scale,
                         const T3__& rate, std::ostream* pstream__) const {
        return exp_loglogistic_Surv(t, shape, scale, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_lognormal_pdf(const T0__& t,
                            const T1__& d,
                            const T2__& mu,
                            const T3__& sigma,
                            const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 415;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 416;
        stan::math::assign(lik, ((exp_Surv(t, rate, pstream__) * lognormal_Surv(t, mu, sigma, pstream__)) * pow((exp_haz(t, rate, pstream__) + lognormal_haz(t, mu, sigma, pstream__)), d)));
        current_statement_begin__ = 418;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct joint_exp_lognormal_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                            const T1__& d,
                            const T2__& mu,
                            const T3__& sigma,
                            const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_lognormal_pdf(t, d, mu, sigma, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_lognormal_lpdf(const T0__& t,
                             const T1__& d,
                             const T2__& mu,
                             const T3__& sigma,
                             const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 422;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 423;
        stan::math::assign(log_lik, (((d * stan::math::log((exp_haz(t, rate, pstream__) + lognormal_haz(t, mu, sigma, pstream__)))) + exp_log_S(t, rate, pstream__)) + lognormal_log_S(t, mu, sigma, pstream__)));
        current_statement_begin__ = 425;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
joint_exp_lognormal_lpdf(const T0__& t,
                             const T1__& d,
                             const T2__& mu,
                             const T3__& sigma,
                             const T4__& rate, std::ostream* pstream__) {
    return joint_exp_lognormal_lpdf<false>(t,d,mu,sigma,rate, pstream__);
}
struct joint_exp_lognormal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                             const T1__& d,
                             const T2__& mu,
                             const T3__& sigma,
                             const T4__& rate, std::ostream* pstream__) const {
        return joint_exp_lognormal_lpdf(t, d, mu, sigma, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
exp_lognormal_Surv(const T0__& t,
                       const T1__& mu,
                       const T2__& sigma,
                       const T3__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 429;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 430;
        stan::math::assign(Surv, (exp_Surv(t, rate, pstream__) * lognormal_Surv(t, mu, sigma, pstream__)));
        current_statement_begin__ = 431;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_lognormal_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                       const T1__& mu,
                       const T2__& sigma,
                       const T3__& rate, std::ostream* pstream__) const {
        return exp_lognormal_Surv(t, mu, sigma, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
exp_lognormal_rng(const T0__& mu,
                      const T1__& sigma,
                      const T2__& lambda, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 435;
        validate_non_negative_index("t_latent", "2", 2);
        std::vector<local_scalar_t__  > t_latent(2, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(t_latent, DUMMY_VAR__);
        stan::math::fill(t_latent, DUMMY_VAR__);
        current_statement_begin__ = 436;
        local_scalar_t__ t_min(DUMMY_VAR__);
        (void) t_min;  // dummy to suppress unused var warning
        stan::math::initialize(t_min, DUMMY_VAR__);
        stan::math::fill(t_min, DUMMY_VAR__);
        current_statement_begin__ = 437;
        stan::model::assign(t_latent, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    exponential_rng(lambda, base_rng__), 
                    "assigning variable t_latent");
        current_statement_begin__ = 438;
        stan::model::assign(t_latent, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    lognormal_rng(mu, sigma, base_rng__), 
                    "assigning variable t_latent");
        current_statement_begin__ = 439;
        stan::math::assign(t_min, min(t_latent));
        current_statement_begin__ = 440;
        return stan::math::promote_scalar<fun_return_scalar_t__>(t_min);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_lognormal_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& mu,
                      const T1__& sigma,
                      const T2__& lambda, RNG& base_rng__, std::ostream* pstream__) const {
        return exp_lognormal_rng(mu, sigma, lambda, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
joint_exp_gengamma_pdf(const T0__& t,
                           const T1__& d,
                           const T2__& mu,
                           const T3__& scale,
                           const T4__& Q,
                           const T5__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 447;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 448;
        stan::math::assign(lik, ((exp_Surv(t, rate, pstream__) * gen_gamma_Surv(t, mu, scale, Q, pstream__)) * pow((exp_haz(t, rate, pstream__) + gen_gamma_haz(t, mu, scale, Q, pstream__)), d)));
        current_statement_begin__ = 450;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct joint_exp_gengamma_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& t,
                           const T1__& d,
                           const T2__& mu,
                           const T3__& scale,
                           const T4__& Q,
                           const T5__& rate, std::ostream* pstream__) const {
        return joint_exp_gengamma_pdf(t, d, mu, scale, Q, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
joint_exp_gengamma_lpdf(const T0__& t,
                            const T1__& d,
                            const T2__& mu,
                            const T3__& scale,
                            const T4__& Q,
                            const T5__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 454;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 455;
        stan::math::assign(log_lik, (((d * stan::math::log((exp_haz(t, rate, pstream__) + gen_gamma_haz(t, mu, scale, Q, pstream__)))) + exp_log_S(t, rate, pstream__)) + gen_gamma_log_S(t, mu, scale, Q, pstream__)));
        current_statement_begin__ = 457;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
joint_exp_gengamma_lpdf(const T0__& t,
                            const T1__& d,
                            const T2__& mu,
                            const T3__& scale,
                            const T4__& Q,
                            const T5__& rate, std::ostream* pstream__) {
    return joint_exp_gengamma_lpdf<false>(t,d,mu,scale,Q,rate, pstream__);
}
struct joint_exp_gengamma_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__>::type>::type
    operator()(const T0__& t,
                            const T1__& d,
                            const T2__& mu,
                            const T3__& scale,
                            const T4__& Q,
                            const T5__& rate, std::ostream* pstream__) const {
        return joint_exp_gengamma_lpdf(t, d, mu, scale, Q, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
exp_gengamma_Surv(const T0__& t,
                      const T1__& mu,
                      const T2__& scale,
                      const T3__& Q,
                      const T4__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 461;
        local_scalar_t__ Surv(DUMMY_VAR__);
        (void) Surv;  // dummy to suppress unused var warning
        stan::math::initialize(Surv, DUMMY_VAR__);
        stan::math::fill(Surv, DUMMY_VAR__);
        current_statement_begin__ = 462;
        stan::math::assign(Surv, (exp_Surv(t, rate, pstream__) * gen_gamma_Surv(t, mu, scale, Q, pstream__)));
        current_statement_begin__ = 463;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Surv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_gengamma_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& t,
                      const T1__& mu,
                      const T2__& scale,
                      const T3__& Q,
                      const T4__& rate, std::ostream* pstream__) const {
        return exp_gengamma_Surv(t, mu, scale, Q, rate, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_gengamma_gengamma
  : public stan::model::model_base_crtp<model_gengamma_gengamma> {
private:
        int n_os;
        int n_pfs;
        int H_os;
        int H_pfs;
        vector_d t_os;
        vector_d t_pfs;
        vector_d d_os;
        vector_d d_pfs;
        matrix_d X_os;
        matrix_d X_pfs;
        double a_mu_pfs;
        double b_mu_pfs;
        double a_mu_os;
        double b_mu_os;
        double a_Q_pfs;
        double b_Q_pfs;
        double a_Q_os;
        double b_Q_os;
        vector_d mu_0_os;
        vector_d mu_0_pfs;
        vector_d sigma_0_os;
        vector_d sigma_0_pfs;
        int bg_model;
        vector_d mu_bg;
        vector_d sigma_bg;
        vector_d h_bg_os;
        vector_d h_bg_pfs;
        int joint_model;
        std::vector<double> mu_joint;
        std::vector<double> sigma_joint;
        int cf_model;
        std::vector<double> mu_cf_gl;
        std::vector<double> mu_cf_os;
        std::vector<double> mu_cf_pfs;
        std::vector<double> sigma_cf_gl;
        std::vector<double> sd_cf_os;
        std::vector<double> sd_cf_pfs;
        std::vector<double> a_cf;
        std::vector<double> b_cf;
        int t_max;
public:
    model_gengamma_gengamma(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gengamma_gengamma(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gengamma_gengamma_namespace::model_gengamma_gengamma";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 470;
            context__.validate_dims("data initialization", "n_os", "int", context__.to_vec());
            n_os = int(0);
            vals_i__ = context__.vals_i("n_os");
            pos__ = 0;
            n_os = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_os", n_os, 0);
            current_statement_begin__ = 471;
            context__.validate_dims("data initialization", "n_pfs", "int", context__.to_vec());
            n_pfs = int(0);
            vals_i__ = context__.vals_i("n_pfs");
            pos__ = 0;
            n_pfs = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_pfs", n_pfs, 0);
            current_statement_begin__ = 472;
            context__.validate_dims("data initialization", "H_os", "int", context__.to_vec());
            H_os = int(0);
            vals_i__ = context__.vals_i("H_os");
            pos__ = 0;
            H_os = vals_i__[pos__++];
            check_greater_or_equal(function__, "H_os", H_os, 0);
            current_statement_begin__ = 473;
            context__.validate_dims("data initialization", "H_pfs", "int", context__.to_vec());
            H_pfs = int(0);
            vals_i__ = context__.vals_i("H_pfs");
            pos__ = 0;
            H_pfs = vals_i__[pos__++];
            check_greater_or_equal(function__, "H_pfs", H_pfs, 0);
            current_statement_begin__ = 476;
            validate_non_negative_index("t_os", "n_os", n_os);
            context__.validate_dims("data initialization", "t_os", "vector_d", context__.to_vec(n_os));
            t_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_os);
            vals_r__ = context__.vals_r("t_os");
            pos__ = 0;
            size_t t_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < t_os_j_1_max__; ++j_1__) {
                t_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 477;
            validate_non_negative_index("t_pfs", "n_pfs", n_pfs);
            context__.validate_dims("data initialization", "t_pfs", "vector_d", context__.to_vec(n_pfs));
            t_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_pfs);
            vals_r__ = context__.vals_r("t_pfs");
            pos__ = 0;
            size_t t_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < t_pfs_j_1_max__; ++j_1__) {
                t_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 479;
            validate_non_negative_index("d_os", "n_os", n_os);
            context__.validate_dims("data initialization", "d_os", "vector_d", context__.to_vec(n_os));
            d_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_os);
            vals_r__ = context__.vals_r("d_os");
            pos__ = 0;
            size_t d_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < d_os_j_1_max__; ++j_1__) {
                d_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 480;
            validate_non_negative_index("d_pfs", "n_pfs", n_pfs);
            context__.validate_dims("data initialization", "d_pfs", "vector_d", context__.to_vec(n_pfs));
            d_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_pfs);
            vals_r__ = context__.vals_r("d_pfs");
            pos__ = 0;
            size_t d_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < d_pfs_j_1_max__; ++j_1__) {
                d_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 482;
            validate_non_negative_index("X_os", "n_os", n_os);
            validate_non_negative_index("X_os", "H_os", H_os);
            context__.validate_dims("data initialization", "X_os", "matrix_d", context__.to_vec(n_os,H_os));
            X_os = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_os, H_os);
            vals_r__ = context__.vals_r("X_os");
            pos__ = 0;
            size_t X_os_j_2_max__ = H_os;
            size_t X_os_j_1_max__ = n_os;
            for (size_t j_2__ = 0; j_2__ < X_os_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_os_j_1_max__; ++j_1__) {
                    X_os(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 483;
            validate_non_negative_index("X_pfs", "n_pfs", n_pfs);
            validate_non_negative_index("X_pfs", "H_pfs", H_pfs);
            context__.validate_dims("data initialization", "X_pfs", "matrix_d", context__.to_vec(n_pfs,H_pfs));
            X_pfs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_pfs, H_pfs);
            vals_r__ = context__.vals_r("X_pfs");
            pos__ = 0;
            size_t X_pfs_j_2_max__ = H_pfs;
            size_t X_pfs_j_1_max__ = n_pfs;
            for (size_t j_2__ = 0; j_2__ < X_pfs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_pfs_j_1_max__; ++j_1__) {
                    X_pfs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 485;
            context__.validate_dims("data initialization", "a_mu_pfs", "double", context__.to_vec());
            a_mu_pfs = double(0);
            vals_r__ = context__.vals_r("a_mu_pfs");
            pos__ = 0;
            a_mu_pfs = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_mu_pfs", a_mu_pfs, 0);
            current_statement_begin__ = 486;
            context__.validate_dims("data initialization", "b_mu_pfs", "double", context__.to_vec());
            b_mu_pfs = double(0);
            vals_r__ = context__.vals_r("b_mu_pfs");
            pos__ = 0;
            b_mu_pfs = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_mu_pfs", b_mu_pfs, 0);
            current_statement_begin__ = 487;
            context__.validate_dims("data initialization", "a_mu_os", "double", context__.to_vec());
            a_mu_os = double(0);
            vals_r__ = context__.vals_r("a_mu_os");
            pos__ = 0;
            a_mu_os = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_mu_os", a_mu_os, 0);
            current_statement_begin__ = 488;
            context__.validate_dims("data initialization", "b_mu_os", "double", context__.to_vec());
            b_mu_os = double(0);
            vals_r__ = context__.vals_r("b_mu_os");
            pos__ = 0;
            b_mu_os = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_mu_os", b_mu_os, 0);
            current_statement_begin__ = 490;
            context__.validate_dims("data initialization", "a_Q_pfs", "double", context__.to_vec());
            a_Q_pfs = double(0);
            vals_r__ = context__.vals_r("a_Q_pfs");
            pos__ = 0;
            a_Q_pfs = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_Q_pfs", a_Q_pfs, 0);
            current_statement_begin__ = 491;
            context__.validate_dims("data initialization", "b_Q_pfs", "double", context__.to_vec());
            b_Q_pfs = double(0);
            vals_r__ = context__.vals_r("b_Q_pfs");
            pos__ = 0;
            b_Q_pfs = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_Q_pfs", b_Q_pfs, 0);
            current_statement_begin__ = 492;
            context__.validate_dims("data initialization", "a_Q_os", "double", context__.to_vec());
            a_Q_os = double(0);
            vals_r__ = context__.vals_r("a_Q_os");
            pos__ = 0;
            a_Q_os = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_Q_os", a_Q_os, 0);
            current_statement_begin__ = 493;
            context__.validate_dims("data initialization", "b_Q_os", "double", context__.to_vec());
            b_Q_os = double(0);
            vals_r__ = context__.vals_r("b_Q_os");
            pos__ = 0;
            b_Q_os = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_Q_os", b_Q_os, 0);
            current_statement_begin__ = 495;
            validate_non_negative_index("mu_0_os", "H_os", H_os);
            context__.validate_dims("data initialization", "mu_0_os", "vector_d", context__.to_vec(H_os));
            mu_0_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_os);
            vals_r__ = context__.vals_r("mu_0_os");
            pos__ = 0;
            size_t mu_0_os_j_1_max__ = H_os;
            for (size_t j_1__ = 0; j_1__ < mu_0_os_j_1_max__; ++j_1__) {
                mu_0_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 496;
            validate_non_negative_index("mu_0_pfs", "H_pfs", H_pfs);
            context__.validate_dims("data initialization", "mu_0_pfs", "vector_d", context__.to_vec(H_pfs));
            mu_0_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_pfs);
            vals_r__ = context__.vals_r("mu_0_pfs");
            pos__ = 0;
            size_t mu_0_pfs_j_1_max__ = H_pfs;
            for (size_t j_1__ = 0; j_1__ < mu_0_pfs_j_1_max__; ++j_1__) {
                mu_0_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 497;
            validate_non_negative_index("sigma_0_os", "H_os", H_os);
            context__.validate_dims("data initialization", "sigma_0_os", "vector_d", context__.to_vec(H_os));
            sigma_0_os = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_os);
            vals_r__ = context__.vals_r("sigma_0_os");
            pos__ = 0;
            size_t sigma_0_os_j_1_max__ = H_os;
            for (size_t j_1__ = 0; j_1__ < sigma_0_os_j_1_max__; ++j_1__) {
                sigma_0_os(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_0_os", sigma_0_os, 0);
            current_statement_begin__ = 498;
            validate_non_negative_index("sigma_0_pfs", "H_pfs", H_pfs);
            context__.validate_dims("data initialization", "sigma_0_pfs", "vector_d", context__.to_vec(H_pfs));
            sigma_0_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>(H_pfs);
            vals_r__ = context__.vals_r("sigma_0_pfs");
            pos__ = 0;
            size_t sigma_0_pfs_j_1_max__ = H_pfs;
            for (size_t j_1__ = 0; j_1__ < sigma_0_pfs_j_1_max__; ++j_1__) {
                sigma_0_pfs(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_0_pfs", sigma_0_pfs, 0);
            current_statement_begin__ = 501;
            context__.validate_dims("data initialization", "bg_model", "int", context__.to_vec());
            bg_model = int(0);
            vals_i__ = context__.vals_i("bg_model");
            pos__ = 0;
            bg_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "bg_model", bg_model, 1);
            check_less_or_equal(function__, "bg_model", bg_model, 2);
            current_statement_begin__ = 502;
            validate_non_negative_index("mu_bg", "(logical_eq(bg_model, 1) ? H_os : 0 )", (logical_eq(bg_model, 1) ? H_os : 0 ));
            context__.validate_dims("data initialization", "mu_bg", "vector_d", context__.to_vec((logical_eq(bg_model, 1) ? H_os : 0 )));
            mu_bg = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(bg_model, 1) ? H_os : 0 ));
            vals_r__ = context__.vals_r("mu_bg");
            pos__ = 0;
            size_t mu_bg_j_1_max__ = (logical_eq(bg_model, 1) ? H_os : 0 );
            for (size_t j_1__ = 0; j_1__ < mu_bg_j_1_max__; ++j_1__) {
                mu_bg(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 503;
            validate_non_negative_index("sigma_bg", "(logical_eq(bg_model, 1) ? H_os : 0 )", (logical_eq(bg_model, 1) ? H_os : 0 ));
            context__.validate_dims("data initialization", "sigma_bg", "vector_d", context__.to_vec((logical_eq(bg_model, 1) ? H_os : 0 )));
            sigma_bg = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(bg_model, 1) ? H_os : 0 ));
            vals_r__ = context__.vals_r("sigma_bg");
            pos__ = 0;
            size_t sigma_bg_j_1_max__ = (logical_eq(bg_model, 1) ? H_os : 0 );
            for (size_t j_1__ = 0; j_1__ < sigma_bg_j_1_max__; ++j_1__) {
                sigma_bg(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_bg", sigma_bg, 0);
            current_statement_begin__ = 504;
            validate_non_negative_index("h_bg_os", "(logical_eq(bg_model, 2) ? n_os : 0 )", (logical_eq(bg_model, 2) ? n_os : 0 ));
            context__.validate_dims("data initialization", "h_bg_os", "vector_d", context__.to_vec((logical_eq(bg_model, 2) ? n_os : 0 )));
            h_bg_os = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(bg_model, 2) ? n_os : 0 ));
            vals_r__ = context__.vals_r("h_bg_os");
            pos__ = 0;
            size_t h_bg_os_j_1_max__ = (logical_eq(bg_model, 2) ? n_os : 0 );
            for (size_t j_1__ = 0; j_1__ < h_bg_os_j_1_max__; ++j_1__) {
                h_bg_os(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 505;
            validate_non_negative_index("h_bg_pfs", "(logical_eq(bg_model, 2) ? n_pfs : 0 )", (logical_eq(bg_model, 2) ? n_pfs : 0 ));
            context__.validate_dims("data initialization", "h_bg_pfs", "vector_d", context__.to_vec((logical_eq(bg_model, 2) ? n_pfs : 0 )));
            h_bg_pfs = Eigen::Matrix<double, Eigen::Dynamic, 1>((logical_eq(bg_model, 2) ? n_pfs : 0 ));
            vals_r__ = context__.vals_r("h_bg_pfs");
            pos__ = 0;
            size_t h_bg_pfs_j_1_max__ = (logical_eq(bg_model, 2) ? n_pfs : 0 );
            for (size_t j_1__ = 0; j_1__ < h_bg_pfs_j_1_max__; ++j_1__) {
                h_bg_pfs(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 507;
            context__.validate_dims("data initialization", "joint_model", "int", context__.to_vec());
            joint_model = int(0);
            vals_i__ = context__.vals_i("joint_model");
            pos__ = 0;
            joint_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "joint_model", joint_model, 0);
            check_less_or_equal(function__, "joint_model", joint_model, 1);
            current_statement_begin__ = 508;
            validate_non_negative_index("mu_joint", "joint_model", joint_model);
            context__.validate_dims("data initialization", "mu_joint", "double", context__.to_vec(joint_model));
            mu_joint = std::vector<double>(joint_model, double(0));
            vals_r__ = context__.vals_r("mu_joint");
            pos__ = 0;
            size_t mu_joint_k_0_max__ = joint_model;
            for (size_t k_0__ = 0; k_0__ < mu_joint_k_0_max__; ++k_0__) {
                mu_joint[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 509;
            validate_non_negative_index("sigma_joint", "joint_model", joint_model);
            context__.validate_dims("data initialization", "sigma_joint", "double", context__.to_vec(joint_model));
            sigma_joint = std::vector<double>(joint_model, double(0));
            vals_r__ = context__.vals_r("sigma_joint");
            pos__ = 0;
            size_t sigma_joint_k_0_max__ = joint_model;
            for (size_t k_0__ = 0; k_0__ < sigma_joint_k_0_max__; ++k_0__) {
                sigma_joint[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_joint_i_0_max__ = joint_model;
            for (size_t i_0__ = 0; i_0__ < sigma_joint_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_joint[i_0__]", sigma_joint[i_0__], 0);
            }
            current_statement_begin__ = 511;
            context__.validate_dims("data initialization", "cf_model", "int", context__.to_vec());
            cf_model = int(0);
            vals_i__ = context__.vals_i("cf_model");
            pos__ = 0;
            cf_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "cf_model", cf_model, 1);
            check_less_or_equal(function__, "cf_model", cf_model, 3);
            current_statement_begin__ = 512;
            validate_non_negative_index("mu_cf_gl", "(logical_eq(cf_model, 3) ? 1 : 0 )", (logical_eq(cf_model, 3) ? 1 : 0 ));
            context__.validate_dims("data initialization", "mu_cf_gl", "double", context__.to_vec((logical_eq(cf_model, 3) ? 1 : 0 )));
            mu_cf_gl = std::vector<double>((logical_eq(cf_model, 3) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("mu_cf_gl");
            pos__ = 0;
            size_t mu_cf_gl_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < mu_cf_gl_k_0_max__; ++k_0__) {
                mu_cf_gl[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 513;
            validate_non_negative_index("mu_cf_os", "(logical_eq(cf_model, 2) ? 1 : 0 )", (logical_eq(cf_model, 2) ? 1 : 0 ));
            context__.validate_dims("data initialization", "mu_cf_os", "double", context__.to_vec((logical_eq(cf_model, 2) ? 1 : 0 )));
            mu_cf_os = std::vector<double>((logical_eq(cf_model, 2) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("mu_cf_os");
            pos__ = 0;
            size_t mu_cf_os_k_0_max__ = (logical_eq(cf_model, 2) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < mu_cf_os_k_0_max__; ++k_0__) {
                mu_cf_os[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 514;
            validate_non_negative_index("mu_cf_pfs", "(logical_eq(cf_model, 2) ? 1 : 0 )", (logical_eq(cf_model, 2) ? 1 : 0 ));
            context__.validate_dims("data initialization", "mu_cf_pfs", "double", context__.to_vec((logical_eq(cf_model, 2) ? 1 : 0 )));
            mu_cf_pfs = std::vector<double>((logical_eq(cf_model, 2) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("mu_cf_pfs");
            pos__ = 0;
            size_t mu_cf_pfs_k_0_max__ = (logical_eq(cf_model, 2) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < mu_cf_pfs_k_0_max__; ++k_0__) {
                mu_cf_pfs[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 515;
            validate_non_negative_index("sigma_cf_gl", "(logical_eq(cf_model, 3) ? 1 : 0 )", (logical_eq(cf_model, 3) ? 1 : 0 ));
            context__.validate_dims("data initialization", "sigma_cf_gl", "double", context__.to_vec((logical_eq(cf_model, 3) ? 1 : 0 )));
            sigma_cf_gl = std::vector<double>((logical_eq(cf_model, 3) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("sigma_cf_gl");
            pos__ = 0;
            size_t sigma_cf_gl_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < sigma_cf_gl_k_0_max__; ++k_0__) {
                sigma_cf_gl[k_0__] = vals_r__[pos__++];
            }
            size_t sigma_cf_gl_i_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t i_0__ = 0; i_0__ < sigma_cf_gl_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sigma_cf_gl[i_0__]", sigma_cf_gl[i_0__], 0);
            }
            current_statement_begin__ = 516;
            validate_non_negative_index("sd_cf_os", "(logical_neq(cf_model, 1) ? 1 : 0 )", (logical_neq(cf_model, 1) ? 1 : 0 ));
            context__.validate_dims("data initialization", "sd_cf_os", "double", context__.to_vec((logical_neq(cf_model, 1) ? 1 : 0 )));
            sd_cf_os = std::vector<double>((logical_neq(cf_model, 1) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("sd_cf_os");
            pos__ = 0;
            size_t sd_cf_os_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < sd_cf_os_k_0_max__; ++k_0__) {
                sd_cf_os[k_0__] = vals_r__[pos__++];
            }
            size_t sd_cf_os_i_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
            for (size_t i_0__ = 0; i_0__ < sd_cf_os_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sd_cf_os[i_0__]", sd_cf_os[i_0__], 0);
            }
            current_statement_begin__ = 517;
            validate_non_negative_index("sd_cf_pfs", "(logical_neq(cf_model, 1) ? 1 : 0 )", (logical_neq(cf_model, 1) ? 1 : 0 ));
            context__.validate_dims("data initialization", "sd_cf_pfs", "double", context__.to_vec((logical_neq(cf_model, 1) ? 1 : 0 )));
            sd_cf_pfs = std::vector<double>((logical_neq(cf_model, 1) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("sd_cf_pfs");
            pos__ = 0;
            size_t sd_cf_pfs_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < sd_cf_pfs_k_0_max__; ++k_0__) {
                sd_cf_pfs[k_0__] = vals_r__[pos__++];
            }
            size_t sd_cf_pfs_i_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
            for (size_t i_0__ = 0; i_0__ < sd_cf_pfs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sd_cf_pfs[i_0__]", sd_cf_pfs[i_0__], 0);
            }
            current_statement_begin__ = 518;
            validate_non_negative_index("a_cf", "(logical_eq(cf_model, 1) ? 1 : 0 )", (logical_eq(cf_model, 1) ? 1 : 0 ));
            context__.validate_dims("data initialization", "a_cf", "double", context__.to_vec((logical_eq(cf_model, 1) ? 1 : 0 )));
            a_cf = std::vector<double>((logical_eq(cf_model, 1) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("a_cf");
            pos__ = 0;
            size_t a_cf_k_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < a_cf_k_0_max__; ++k_0__) {
                a_cf[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 519;
            validate_non_negative_index("b_cf", "(logical_eq(cf_model, 1) ? 1 : 0 )", (logical_eq(cf_model, 1) ? 1 : 0 ));
            context__.validate_dims("data initialization", "b_cf", "double", context__.to_vec((logical_eq(cf_model, 1) ? 1 : 0 )));
            b_cf = std::vector<double>((logical_eq(cf_model, 1) ? 1 : 0 ), double(0));
            vals_r__ = context__.vals_r("b_cf");
            pos__ = 0;
            size_t b_cf_k_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < b_cf_k_0_max__; ++k_0__) {
                b_cf[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 521;
            context__.validate_dims("data initialization", "t_max", "int", context__.to_vec());
            t_max = int(0);
            vals_i__ = context__.vals_i("t_max");
            pos__ = 0;
            t_max = vals_i__[pos__++];
            check_greater_or_equal(function__, "t_max", t_max, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 525;
            validate_non_negative_index("beta_os", "H_os", H_os);
            num_params_r__ += H_os;
            current_statement_begin__ = 526;
            validate_non_negative_index("beta_pfs", "H_pfs", H_pfs);
            num_params_r__ += H_pfs;
            current_statement_begin__ = 527;
            validate_non_negative_index("beta_bg", "(logical_eq(bg_model, 1) ? H_os : 0 )", (logical_eq(bg_model, 1) ? H_os : 0 ));
            num_params_r__ += (logical_eq(bg_model, 1) ? H_os : 0 );
            current_statement_begin__ = 528;
            validate_non_negative_index("beta_joint", "joint_model", joint_model);
            num_params_r__ += (1 * joint_model);
            current_statement_begin__ = 530;
            num_params_r__ += 1;
            current_statement_begin__ = 531;
            num_params_r__ += 1;
            current_statement_begin__ = 533;
            num_params_r__ += 1;
            current_statement_begin__ = 534;
            num_params_r__ += 1;
            current_statement_begin__ = 536;
            validate_non_negative_index("cf_pooled", "(logical_eq(cf_model, 1) ? 1 : 0 )", (logical_eq(cf_model, 1) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_eq(cf_model, 1) ? 1 : 0 ));
            current_statement_begin__ = 537;
            validate_non_negative_index("lp_cf_global", "(logical_eq(cf_model, 3) ? 1 : 0 )", (logical_eq(cf_model, 3) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_eq(cf_model, 3) ? 1 : 0 ));
            current_statement_begin__ = 538;
            validate_non_negative_index("lp_cf_os", "(logical_neq(cf_model, 1) ? 1 : 0 )", (logical_neq(cf_model, 1) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_neq(cf_model, 1) ? 1 : 0 ));
            current_statement_begin__ = 539;
            validate_non_negative_index("lp_cf_pfs", "(logical_neq(cf_model, 1) ? 1 : 0 )", (logical_neq(cf_model, 1) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_neq(cf_model, 1) ? 1 : 0 ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gengamma_gengamma() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 525;
        if (!(context__.contains_r("beta_os")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_os missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_os");
        pos__ = 0U;
        validate_non_negative_index("beta_os", "H_os", H_os);
        context__.validate_dims("parameter initialization", "beta_os", "vector_d", context__.to_vec(H_os));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_os(H_os);
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            beta_os(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_os);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_os: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 526;
        if (!(context__.contains_r("beta_pfs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_pfs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_pfs");
        pos__ = 0U;
        validate_non_negative_index("beta_pfs", "H_pfs", H_pfs);
        context__.validate_dims("parameter initialization", "beta_pfs", "vector_d", context__.to_vec(H_pfs));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_pfs(H_pfs);
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            beta_pfs(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_pfs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_pfs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 527;
        if (!(context__.contains_r("beta_bg")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_bg missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_bg");
        pos__ = 0U;
        validate_non_negative_index("beta_bg", "(logical_eq(bg_model, 1) ? H_os : 0 )", (logical_eq(bg_model, 1) ? H_os : 0 ));
        context__.validate_dims("parameter initialization", "beta_bg", "vector_d", context__.to_vec((logical_eq(bg_model, 1) ? H_os : 0 )));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bg((logical_eq(bg_model, 1) ? H_os : 0 ));
        size_t beta_bg_j_1_max__ = (logical_eq(bg_model, 1) ? H_os : 0 );
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            beta_bg(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_bg);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_bg: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 528;
        if (!(context__.contains_r("beta_joint")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_joint missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_joint");
        pos__ = 0U;
        validate_non_negative_index("beta_joint", "joint_model", joint_model);
        context__.validate_dims("parameter initialization", "beta_joint", "double", context__.to_vec(joint_model));
        std::vector<double> beta_joint(joint_model, double(0));
        size_t beta_joint_k_0_max__ = joint_model;
        for (size_t k_0__ = 0; k_0__ < beta_joint_k_0_max__; ++k_0__) {
            beta_joint[k_0__] = vals_r__[pos__++];
        }
        size_t beta_joint_i_0_max__ = joint_model;
        for (size_t i_0__ = 0; i_0__ < beta_joint_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(beta_joint[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_joint: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 530;
        if (!(context__.contains_r("mu_pfs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_pfs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_pfs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_pfs", "double", context__.to_vec());
        double mu_pfs(0);
        mu_pfs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mu_pfs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_pfs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 531;
        if (!(context__.contains_r("mu_os")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_os missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_os");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_os", "double", context__.to_vec());
        double mu_os(0);
        mu_os = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mu_os);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_os: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 533;
        if (!(context__.contains_r("Q_pfs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Q_pfs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Q_pfs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Q_pfs", "double", context__.to_vec());
        double Q_pfs(0);
        Q_pfs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, Q_pfs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Q_pfs: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 534;
        if (!(context__.contains_r("Q_os")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Q_os missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Q_os");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Q_os", "double", context__.to_vec());
        double Q_os(0);
        Q_os = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, Q_os);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Q_os: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 536;
        if (!(context__.contains_r("cf_pooled")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable cf_pooled missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("cf_pooled");
        pos__ = 0U;
        validate_non_negative_index("cf_pooled", "(logical_eq(cf_model, 1) ? 1 : 0 )", (logical_eq(cf_model, 1) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "cf_pooled", "double", context__.to_vec((logical_eq(cf_model, 1) ? 1 : 0 )));
        std::vector<double> cf_pooled((logical_eq(cf_model, 1) ? 1 : 0 ), double(0));
        size_t cf_pooled_k_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < cf_pooled_k_0_max__; ++k_0__) {
            cf_pooled[k_0__] = vals_r__[pos__++];
        }
        size_t cf_pooled_i_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < cf_pooled_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, cf_pooled[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable cf_pooled: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 537;
        if (!(context__.contains_r("lp_cf_global")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lp_cf_global missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lp_cf_global");
        pos__ = 0U;
        validate_non_negative_index("lp_cf_global", "(logical_eq(cf_model, 3) ? 1 : 0 )", (logical_eq(cf_model, 3) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "lp_cf_global", "double", context__.to_vec((logical_eq(cf_model, 3) ? 1 : 0 )));
        std::vector<double> lp_cf_global((logical_eq(cf_model, 3) ? 1 : 0 ), double(0));
        size_t lp_cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_global_k_0_max__; ++k_0__) {
            lp_cf_global[k_0__] = vals_r__[pos__++];
        }
        size_t lp_cf_global_i_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < lp_cf_global_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lp_cf_global[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lp_cf_global: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 538;
        if (!(context__.contains_r("lp_cf_os")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lp_cf_os missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lp_cf_os");
        pos__ = 0U;
        validate_non_negative_index("lp_cf_os", "(logical_neq(cf_model, 1) ? 1 : 0 )", (logical_neq(cf_model, 1) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "lp_cf_os", "double", context__.to_vec((logical_neq(cf_model, 1) ? 1 : 0 )));
        std::vector<double> lp_cf_os((logical_neq(cf_model, 1) ? 1 : 0 ), double(0));
        size_t lp_cf_os_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_os_k_0_max__; ++k_0__) {
            lp_cf_os[k_0__] = vals_r__[pos__++];
        }
        size_t lp_cf_os_i_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < lp_cf_os_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lp_cf_os[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lp_cf_os: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 539;
        if (!(context__.contains_r("lp_cf_pfs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lp_cf_pfs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lp_cf_pfs");
        pos__ = 0U;
        validate_non_negative_index("lp_cf_pfs", "(logical_neq(cf_model, 1) ? 1 : 0 )", (logical_neq(cf_model, 1) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "lp_cf_pfs", "double", context__.to_vec((logical_neq(cf_model, 1) ? 1 : 0 )));
        std::vector<double> lp_cf_pfs((logical_neq(cf_model, 1) ? 1 : 0 ), double(0));
        size_t lp_cf_pfs_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_pfs_k_0_max__; ++k_0__) {
            lp_cf_pfs[k_0__] = vals_r__[pos__++];
        }
        size_t lp_cf_pfs_i_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < lp_cf_pfs_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lp_cf_pfs[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lp_cf_pfs: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 525;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_os;
            (void) beta_os;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_os = in__.vector_constrain(H_os, lp__);
            else
                beta_os = in__.vector_constrain(H_os);
            current_statement_begin__ = 526;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_pfs;
            (void) beta_pfs;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_pfs = in__.vector_constrain(H_pfs, lp__);
            else
                beta_pfs = in__.vector_constrain(H_pfs);
            current_statement_begin__ = 527;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_bg;
            (void) beta_bg;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_bg = in__.vector_constrain((logical_eq(bg_model, 1) ? H_os : 0 ), lp__);
            else
                beta_bg = in__.vector_constrain((logical_eq(bg_model, 1) ? H_os : 0 ));
            current_statement_begin__ = 528;
            std::vector<local_scalar_t__> beta_joint;
            size_t beta_joint_d_0_max__ = joint_model;
            beta_joint.reserve(beta_joint_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_joint_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_joint.push_back(in__.scalar_constrain(lp__));
                else
                    beta_joint.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 530;
            local_scalar_t__ mu_pfs;
            (void) mu_pfs;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_pfs = in__.scalar_lb_constrain(0, lp__);
            else
                mu_pfs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 531;
            local_scalar_t__ mu_os;
            (void) mu_os;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_os = in__.scalar_lb_constrain(0, lp__);
            else
                mu_os = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 533;
            local_scalar_t__ Q_pfs;
            (void) Q_pfs;  // dummy to suppress unused var warning
            if (jacobian__)
                Q_pfs = in__.scalar_lb_constrain(0, lp__);
            else
                Q_pfs = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 534;
            local_scalar_t__ Q_os;
            (void) Q_os;  // dummy to suppress unused var warning
            if (jacobian__)
                Q_os = in__.scalar_lb_constrain(0, lp__);
            else
                Q_os = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 536;
            std::vector<local_scalar_t__> cf_pooled;
            size_t cf_pooled_d_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
            cf_pooled.reserve(cf_pooled_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < cf_pooled_d_0_max__; ++d_0__) {
                if (jacobian__)
                    cf_pooled.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    cf_pooled.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 537;
            std::vector<local_scalar_t__> lp_cf_global;
            size_t lp_cf_global_d_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            lp_cf_global.reserve(lp_cf_global_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lp_cf_global_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lp_cf_global.push_back(in__.scalar_constrain(lp__));
                else
                    lp_cf_global.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 538;
            std::vector<local_scalar_t__> lp_cf_os;
            size_t lp_cf_os_d_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
            lp_cf_os.reserve(lp_cf_os_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lp_cf_os_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lp_cf_os.push_back(in__.scalar_constrain(lp__));
                else
                    lp_cf_os.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 539;
            std::vector<local_scalar_t__> lp_cf_pfs;
            size_t lp_cf_pfs_d_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
            lp_cf_pfs.reserve(lp_cf_pfs_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lp_cf_pfs_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lp_cf_pfs.push_back(in__.scalar_constrain(lp__));
                else
                    lp_cf_pfs.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 543;
            validate_non_negative_index("lp_os", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_os(n_os);
            stan::math::initialize(lp_os, DUMMY_VAR__);
            stan::math::fill(lp_os, DUMMY_VAR__);
            current_statement_begin__ = 544;
            validate_non_negative_index("lp_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_pfs(n_pfs);
            stan::math::initialize(lp_pfs, DUMMY_VAR__);
            stan::math::fill(lp_pfs, DUMMY_VAR__);
            current_statement_begin__ = 545;
            validate_non_negative_index("lp_os_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_os_bg(n_os);
            stan::math::initialize(lp_os_bg, DUMMY_VAR__);
            stan::math::fill(lp_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 546;
            validate_non_negative_index("lp_pfs_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lp_pfs_bg(n_os);
            stan::math::initialize(lp_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lp_pfs_bg, DUMMY_VAR__);
            current_statement_begin__ = 548;
            validate_non_negative_index("sigma_os", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_os(n_os);
            stan::math::initialize(sigma_os, DUMMY_VAR__);
            stan::math::fill(sigma_os, DUMMY_VAR__);
            current_statement_begin__ = 549;
            validate_non_negative_index("sigma_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_pfs(n_pfs);
            stan::math::initialize(sigma_pfs, DUMMY_VAR__);
            stan::math::fill(sigma_pfs, DUMMY_VAR__);
            current_statement_begin__ = 550;
            validate_non_negative_index("lambda_os_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_os_bg(n_os);
            stan::math::initialize(lambda_os_bg, DUMMY_VAR__);
            stan::math::fill(lambda_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 551;
            validate_non_negative_index("lambda_pfs_bg", "n_os", n_os);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_pfs_bg(n_os);
            stan::math::initialize(lambda_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_bg, DUMMY_VAR__);
            current_statement_begin__ = 553;
            validate_non_negative_index("cf_global", "(logical_eq(cf_model, 3) ? 1 : 0 )", (logical_eq(cf_model, 3) ? 1 : 0 ));
            std::vector<local_scalar_t__> cf_global((logical_eq(cf_model, 3) ? 1 : 0 ), local_scalar_t__(0));
            stan::math::initialize(cf_global, DUMMY_VAR__);
            stan::math::fill(cf_global, DUMMY_VAR__);
            current_statement_begin__ = 554;
            local_scalar_t__ cf_os;
            (void) cf_os;  // dummy to suppress unused var warning
            stan::math::initialize(cf_os, DUMMY_VAR__);
            stan::math::fill(cf_os, DUMMY_VAR__);
            current_statement_begin__ = 555;
            local_scalar_t__ cf_pfs;
            (void) cf_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(cf_pfs, DUMMY_VAR__);
            stan::math::fill(cf_pfs, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 558;
            if (as_bool(joint_model)) {
                current_statement_begin__ = 559;
                stan::math::assign(lp_os, add(multiply(X_os, beta_os), multiply(get_base1(beta_joint, 1, "beta_joint", 1), subtract(t_pfs, (1 / stan::math::exp(get_base1(beta_pfs, 1, "beta_pfs", 1)))))));
            } else {
                current_statement_begin__ = 561;
                stan::math::assign(lp_os, multiply(X_os, beta_os));
            }
            current_statement_begin__ = 564;
            stan::math::assign(lp_pfs, multiply(X_pfs, beta_pfs));
            current_statement_begin__ = 566;
            if (as_bool(logical_eq(bg_model, 1))) {
                current_statement_begin__ = 567;
                stan::math::assign(lp_os_bg, multiply(X_os, beta_bg));
                current_statement_begin__ = 568;
                stan::math::assign(lp_pfs_bg, multiply(X_pfs, beta_bg));
            } else {
                current_statement_begin__ = 570;
                stan::math::assign(lp_os_bg, stan::math::log(h_bg_os));
                current_statement_begin__ = 571;
                stan::math::assign(lp_pfs_bg, stan::math::log(h_bg_pfs));
            }
            current_statement_begin__ = 574;
            stan::math::assign(lambda_os_bg, stan::math::exp(lp_os_bg));
            current_statement_begin__ = 575;
            stan::math::assign(lambda_pfs_bg, stan::math::exp(lp_pfs_bg));
            current_statement_begin__ = 578;
            stan::math::assign(sigma_os, stan::math::exp(lp_os));
            current_statement_begin__ = 579;
            stan::math::assign(sigma_pfs, stan::math::exp(lp_pfs));
            current_statement_begin__ = 581;
            if (as_bool(logical_eq(cf_model, 3))) {
                current_statement_begin__ = 582;
                stan::math::assign(cf_global, inv_logit(lp_cf_global));
            }
            current_statement_begin__ = 584;
            if (as_bool(logical_neq(cf_model, 1))) {
                current_statement_begin__ = 585;
                stan::math::assign(cf_os, inv_logit(get_base1(lp_cf_os, 1, "lp_cf_os", 1)));
                current_statement_begin__ = 586;
                stan::math::assign(cf_pfs, inv_logit(get_base1(lp_cf_pfs, 1, "lp_cf_pfs", 1)));
            } else {
                current_statement_begin__ = 588;
                stan::math::assign(cf_os, get_base1(cf_pooled, 1, "cf_pooled", 1));
                current_statement_begin__ = 589;
                stan::math::assign(cf_pfs, get_base1(cf_pooled, 1, "cf_pooled", 1));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 543;
            size_t lp_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_os(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_os" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_os: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 544;
            size_t lp_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_pfs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_pfs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_pfs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 545;
            size_t lp_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_os_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_os_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_os_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 546;
            size_t lp_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lp_pfs_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lp_pfs_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lp_pfs_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 548;
            size_t sigma_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < sigma_os_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_os(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_os" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_os: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 549;
            size_t sigma_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < sigma_pfs_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma_pfs(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma_pfs" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_pfs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 550;
            size_t lambda_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_os_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_os_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_os_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 551;
            size_t lambda_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_pfs_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_pfs_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_pfs_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 553;
            size_t cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < cf_global_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(cf_global[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cf_global" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cf_global: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t cf_global_i_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t i_0__ = 0; i_0__ < cf_global_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cf_global[i_0__]", cf_global[i_0__], 0);
                check_less_or_equal(function__, "cf_global[i_0__]", cf_global[i_0__], 1);
            }
            current_statement_begin__ = 554;
            if (stan::math::is_uninitialized(cf_os)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: cf_os";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cf_os: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "cf_os", cf_os, 0);
            check_less_or_equal(function__, "cf_os", cf_os, 1);
            current_statement_begin__ = 555;
            if (stan::math::is_uninitialized(cf_pfs)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: cf_pfs";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cf_pfs: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "cf_pfs", cf_pfs, 0);
            check_less_or_equal(function__, "cf_pfs", cf_pfs, 1);
            // model body
            current_statement_begin__ = 594;
            lp_accum__.add(normal_log<propto__>(beta_os, mu_0_os, sigma_0_os));
            current_statement_begin__ = 595;
            lp_accum__.add(normal_log<propto__>(beta_pfs, mu_0_pfs, sigma_0_pfs));
            current_statement_begin__ = 597;
            lp_accum__.add(gamma_log<propto__>(mu_pfs, a_mu_pfs, b_mu_pfs));
            current_statement_begin__ = 598;
            lp_accum__.add(gamma_log<propto__>(mu_os, a_mu_os, b_mu_os));
            current_statement_begin__ = 600;
            lp_accum__.add(gamma_log<propto__>(Q_pfs, a_Q_pfs, b_Q_pfs));
            current_statement_begin__ = 601;
            lp_accum__.add(gamma_log<propto__>(Q_os, a_Q_os, b_Q_os));
            current_statement_begin__ = 603;
            if (as_bool(logical_eq(bg_model, 1))) {
                current_statement_begin__ = 604;
                lp_accum__.add(normal_log<propto__>(beta_bg, mu_bg, sigma_bg));
            }
            current_statement_begin__ = 607;
            if (as_bool(joint_model)) {
                current_statement_begin__ = 608;
                lp_accum__.add(normal_log<propto__>(beta_joint, mu_joint, sigma_joint));
            }
            current_statement_begin__ = 612;
            if (as_bool(logical_eq(cf_model, 3))) {
                current_statement_begin__ = 613;
                lp_accum__.add(normal_log<propto__>(lp_cf_global, mu_cf_gl, sigma_cf_gl));
                current_statement_begin__ = 614;
                lp_accum__.add(normal_log<propto__>(lp_cf_os, lp_cf_global, sd_cf_os));
                current_statement_begin__ = 615;
                lp_accum__.add(normal_log<propto__>(lp_cf_pfs, lp_cf_global, sd_cf_pfs));
            } else if (as_bool(logical_eq(cf_model, 2))) {
                current_statement_begin__ = 617;
                lp_accum__.add(normal_log<propto__>(lp_cf_os, mu_cf_os, sd_cf_os));
                current_statement_begin__ = 618;
                lp_accum__.add(normal_log<propto__>(lp_cf_pfs, mu_cf_pfs, sd_cf_pfs));
            } else {
                current_statement_begin__ = 620;
                lp_accum__.add(beta_log<propto__>(cf_pooled, a_cf, b_cf));
            }
            current_statement_begin__ = 626;
            for (int i = 1; i <= n_os; ++i) {
                current_statement_begin__ = 627;
                lp_accum__.add((log_sum_exp((stan::math::log(cf_os) + surv_exp_lpdf(get_base1(t_os, i, "t_os", 1), get_base1(d_os, i, "d_os", 1), get_base1(lambda_os_bg, i, "lambda_os_bg", 1), pstream__)), (log1m(cf_os) + joint_exp_gengamma_lpdf(get_base1(t_os, i, "t_os", 1), get_base1(d_os, i, "d_os", 1), mu_os, get_base1(sigma_os, i, "sigma_os", 1), Q_os, get_base1(lambda_os_bg, i, "lambda_os_bg", 1), pstream__))) + log_sum_exp((stan::math::log(cf_pfs) + surv_exp_lpdf(get_base1(t_pfs, i, "t_pfs", 1), get_base1(d_pfs, i, "d_pfs", 1), get_base1(lambda_pfs_bg, i, "lambda_pfs_bg", 1), pstream__)), (log1m(cf_pfs) + joint_exp_gengamma_lpdf(get_base1(t_pfs, i, "t_pfs", 1), get_base1(d_pfs, i, "d_pfs", 1), mu_pfs, get_base1(sigma_pfs, i, "sigma_pfs", 1), Q_pfs, get_base1(lambda_pfs_bg, i, "lambda_pfs_bg", 1), pstream__)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_os");
        names__.push_back("beta_pfs");
        names__.push_back("beta_bg");
        names__.push_back("beta_joint");
        names__.push_back("mu_pfs");
        names__.push_back("mu_os");
        names__.push_back("Q_pfs");
        names__.push_back("Q_os");
        names__.push_back("cf_pooled");
        names__.push_back("lp_cf_global");
        names__.push_back("lp_cf_os");
        names__.push_back("lp_cf_pfs");
        names__.push_back("lp_os");
        names__.push_back("lp_pfs");
        names__.push_back("lp_os_bg");
        names__.push_back("lp_pfs_bg");
        names__.push_back("sigma_os");
        names__.push_back("sigma_pfs");
        names__.push_back("lambda_os_bg");
        names__.push_back("lambda_pfs_bg");
        names__.push_back("cf_global");
        names__.push_back("cf_os");
        names__.push_back("cf_pfs");
        names__.push_back("mean_os");
        names__.push_back("mean_pfs");
        names__.push_back("mean_bg");
        names__.push_back("S_bg");
        names__.push_back("S_os");
        names__.push_back("S_pfs");
        names__.push_back("S_os_pred");
        names__.push_back("S_pfs_pred");
        names__.push_back("pmean_os");
        names__.push_back("pmean_pfs");
        names__.push_back("pmean_bg");
        names__.push_back("pmean_cf_os");
        names__.push_back("pmean_cf_pfs");
        names__.push_back("pS_bg");
        names__.push_back("pS_os");
        names__.push_back("pS_pfs");
        names__.push_back("S_os_prior");
        names__.push_back("S_pfs_prior");
        names__.push_back("log_lik");
        names__.push_back("pbeta_os");
        names__.push_back("pbeta_pfs");
        names__.push_back("pmu_pfs");
        names__.push_back("pmu_os");
        names__.push_back("pQ_pfs");
        names__.push_back("pQ_os");
        names__.push_back("pbeta_bg");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(H_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H_pfs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(bg_model, 1) ? H_os : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(joint_model);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(cf_model, 1) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(cf_model, 3) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_neq(cf_model, 1) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_neq(cf_model, 1) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pfs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pfs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(cf_model, 3) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t_max);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_os);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gengamma_gengamma_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_os = in__.vector_constrain(H_os);
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            vars__.push_back(beta_os(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_pfs = in__.vector_constrain(H_pfs);
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            vars__.push_back(beta_pfs(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bg = in__.vector_constrain((logical_eq(bg_model, 1) ? H_os : 0 ));
        size_t beta_bg_j_1_max__ = (logical_eq(bg_model, 1) ? H_os : 0 );
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            vars__.push_back(beta_bg(j_1__));
        }
        std::vector<double> beta_joint;
        size_t beta_joint_d_0_max__ = joint_model;
        beta_joint.reserve(beta_joint_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_joint_d_0_max__; ++d_0__) {
            beta_joint.push_back(in__.scalar_constrain());
        }
        size_t beta_joint_k_0_max__ = joint_model;
        for (size_t k_0__ = 0; k_0__ < beta_joint_k_0_max__; ++k_0__) {
            vars__.push_back(beta_joint[k_0__]);
        }
        double mu_pfs = in__.scalar_lb_constrain(0);
        vars__.push_back(mu_pfs);
        double mu_os = in__.scalar_lb_constrain(0);
        vars__.push_back(mu_os);
        double Q_pfs = in__.scalar_lb_constrain(0);
        vars__.push_back(Q_pfs);
        double Q_os = in__.scalar_lb_constrain(0);
        vars__.push_back(Q_os);
        std::vector<double> cf_pooled;
        size_t cf_pooled_d_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
        cf_pooled.reserve(cf_pooled_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < cf_pooled_d_0_max__; ++d_0__) {
            cf_pooled.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t cf_pooled_k_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < cf_pooled_k_0_max__; ++k_0__) {
            vars__.push_back(cf_pooled[k_0__]);
        }
        std::vector<double> lp_cf_global;
        size_t lp_cf_global_d_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
        lp_cf_global.reserve(lp_cf_global_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lp_cf_global_d_0_max__; ++d_0__) {
            lp_cf_global.push_back(in__.scalar_constrain());
        }
        size_t lp_cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_global_k_0_max__; ++k_0__) {
            vars__.push_back(lp_cf_global[k_0__]);
        }
        std::vector<double> lp_cf_os;
        size_t lp_cf_os_d_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        lp_cf_os.reserve(lp_cf_os_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lp_cf_os_d_0_max__; ++d_0__) {
            lp_cf_os.push_back(in__.scalar_constrain());
        }
        size_t lp_cf_os_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_os_k_0_max__; ++k_0__) {
            vars__.push_back(lp_cf_os[k_0__]);
        }
        std::vector<double> lp_cf_pfs;
        size_t lp_cf_pfs_d_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        lp_cf_pfs.reserve(lp_cf_pfs_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lp_cf_pfs_d_0_max__; ++d_0__) {
            lp_cf_pfs.push_back(in__.scalar_constrain());
        }
        size_t lp_cf_pfs_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_pfs_k_0_max__; ++k_0__) {
            vars__.push_back(lp_cf_pfs[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 543;
            validate_non_negative_index("lp_os", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_os(n_os);
            stan::math::initialize(lp_os, DUMMY_VAR__);
            stan::math::fill(lp_os, DUMMY_VAR__);
            current_statement_begin__ = 544;
            validate_non_negative_index("lp_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_pfs(n_pfs);
            stan::math::initialize(lp_pfs, DUMMY_VAR__);
            stan::math::fill(lp_pfs, DUMMY_VAR__);
            current_statement_begin__ = 545;
            validate_non_negative_index("lp_os_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_os_bg(n_os);
            stan::math::initialize(lp_os_bg, DUMMY_VAR__);
            stan::math::fill(lp_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 546;
            validate_non_negative_index("lp_pfs_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lp_pfs_bg(n_os);
            stan::math::initialize(lp_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lp_pfs_bg, DUMMY_VAR__);
            current_statement_begin__ = 548;
            validate_non_negative_index("sigma_os", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_os(n_os);
            stan::math::initialize(sigma_os, DUMMY_VAR__);
            stan::math::fill(sigma_os, DUMMY_VAR__);
            current_statement_begin__ = 549;
            validate_non_negative_index("sigma_pfs", "n_pfs", n_pfs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_pfs(n_pfs);
            stan::math::initialize(sigma_pfs, DUMMY_VAR__);
            stan::math::fill(sigma_pfs, DUMMY_VAR__);
            current_statement_begin__ = 550;
            validate_non_negative_index("lambda_os_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_os_bg(n_os);
            stan::math::initialize(lambda_os_bg, DUMMY_VAR__);
            stan::math::fill(lambda_os_bg, DUMMY_VAR__);
            current_statement_begin__ = 551;
            validate_non_negative_index("lambda_pfs_bg", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_pfs_bg(n_os);
            stan::math::initialize(lambda_pfs_bg, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_bg, DUMMY_VAR__);
            current_statement_begin__ = 553;
            validate_non_negative_index("cf_global", "(logical_eq(cf_model, 3) ? 1 : 0 )", (logical_eq(cf_model, 3) ? 1 : 0 ));
            std::vector<double> cf_global((logical_eq(cf_model, 3) ? 1 : 0 ), double(0));
            stan::math::initialize(cf_global, DUMMY_VAR__);
            stan::math::fill(cf_global, DUMMY_VAR__);
            current_statement_begin__ = 554;
            double cf_os;
            (void) cf_os;  // dummy to suppress unused var warning
            stan::math::initialize(cf_os, DUMMY_VAR__);
            stan::math::fill(cf_os, DUMMY_VAR__);
            current_statement_begin__ = 555;
            double cf_pfs;
            (void) cf_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(cf_pfs, DUMMY_VAR__);
            stan::math::fill(cf_pfs, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 558;
            if (as_bool(joint_model)) {
                current_statement_begin__ = 559;
                stan::math::assign(lp_os, add(multiply(X_os, beta_os), multiply(get_base1(beta_joint, 1, "beta_joint", 1), subtract(t_pfs, (1 / stan::math::exp(get_base1(beta_pfs, 1, "beta_pfs", 1)))))));
            } else {
                current_statement_begin__ = 561;
                stan::math::assign(lp_os, multiply(X_os, beta_os));
            }
            current_statement_begin__ = 564;
            stan::math::assign(lp_pfs, multiply(X_pfs, beta_pfs));
            current_statement_begin__ = 566;
            if (as_bool(logical_eq(bg_model, 1))) {
                current_statement_begin__ = 567;
                stan::math::assign(lp_os_bg, multiply(X_os, beta_bg));
                current_statement_begin__ = 568;
                stan::math::assign(lp_pfs_bg, multiply(X_pfs, beta_bg));
            } else {
                current_statement_begin__ = 570;
                stan::math::assign(lp_os_bg, stan::math::log(h_bg_os));
                current_statement_begin__ = 571;
                stan::math::assign(lp_pfs_bg, stan::math::log(h_bg_pfs));
            }
            current_statement_begin__ = 574;
            stan::math::assign(lambda_os_bg, stan::math::exp(lp_os_bg));
            current_statement_begin__ = 575;
            stan::math::assign(lambda_pfs_bg, stan::math::exp(lp_pfs_bg));
            current_statement_begin__ = 578;
            stan::math::assign(sigma_os, stan::math::exp(lp_os));
            current_statement_begin__ = 579;
            stan::math::assign(sigma_pfs, stan::math::exp(lp_pfs));
            current_statement_begin__ = 581;
            if (as_bool(logical_eq(cf_model, 3))) {
                current_statement_begin__ = 582;
                stan::math::assign(cf_global, inv_logit(lp_cf_global));
            }
            current_statement_begin__ = 584;
            if (as_bool(logical_neq(cf_model, 1))) {
                current_statement_begin__ = 585;
                stan::math::assign(cf_os, inv_logit(get_base1(lp_cf_os, 1, "lp_cf_os", 1)));
                current_statement_begin__ = 586;
                stan::math::assign(cf_pfs, inv_logit(get_base1(lp_cf_pfs, 1, "lp_cf_pfs", 1)));
            } else {
                current_statement_begin__ = 588;
                stan::math::assign(cf_os, get_base1(cf_pooled, 1, "cf_pooled", 1));
                current_statement_begin__ = 589;
                stan::math::assign(cf_pfs, get_base1(cf_pooled, 1, "cf_pooled", 1));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 553;
            size_t cf_global_i_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t i_0__ = 0; i_0__ < cf_global_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cf_global[i_0__]", cf_global[i_0__], 0);
                check_less_or_equal(function__, "cf_global[i_0__]", cf_global[i_0__], 1);
            }
            current_statement_begin__ = 554;
            check_greater_or_equal(function__, "cf_os", cf_os, 0);
            check_less_or_equal(function__, "cf_os", cf_os, 1);
            current_statement_begin__ = 555;
            check_greater_or_equal(function__, "cf_pfs", cf_pfs, 0);
            check_less_or_equal(function__, "cf_pfs", cf_pfs, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t lp_os_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_os(j_1__));
                }
                size_t lp_pfs_j_1_max__ = n_pfs;
                for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_pfs(j_1__));
                }
                size_t lp_os_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_os_bg(j_1__));
                }
                size_t lp_pfs_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lp_pfs_bg(j_1__));
                }
                size_t sigma_os_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < sigma_os_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_os(j_1__));
                }
                size_t sigma_pfs_j_1_max__ = n_pfs;
                for (size_t j_1__ = 0; j_1__ < sigma_pfs_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma_pfs(j_1__));
                }
                size_t lambda_os_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_os_bg(j_1__));
                }
                size_t lambda_pfs_bg_j_1_max__ = n_os;
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_pfs_bg(j_1__));
                }
                size_t cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
                for (size_t k_0__ = 0; k_0__ < cf_global_k_0_max__; ++k_0__) {
                    vars__.push_back(cf_global[k_0__]);
                }
                vars__.push_back(cf_os);
                vars__.push_back(cf_pfs);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 642;
            double mean_os;
            (void) mean_os;  // dummy to suppress unused var warning
            stan::math::initialize(mean_os, DUMMY_VAR__);
            stan::math::fill(mean_os, DUMMY_VAR__);
            current_statement_begin__ = 643;
            double mean_pfs;
            (void) mean_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(mean_pfs, DUMMY_VAR__);
            stan::math::fill(mean_pfs, DUMMY_VAR__);
            current_statement_begin__ = 644;
            double mean_bg;
            (void) mean_bg;  // dummy to suppress unused var warning
            stan::math::initialize(mean_bg, DUMMY_VAR__);
            stan::math::fill(mean_bg, DUMMY_VAR__);
            current_statement_begin__ = 646;
            validate_non_negative_index("S_bg", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_bg(t_max);
            stan::math::initialize(S_bg, DUMMY_VAR__);
            stan::math::fill(S_bg, DUMMY_VAR__);
            current_statement_begin__ = 647;
            validate_non_negative_index("S_os", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_os(t_max);
            stan::math::initialize(S_os, DUMMY_VAR__);
            stan::math::fill(S_os, DUMMY_VAR__);
            current_statement_begin__ = 648;
            validate_non_negative_index("S_pfs", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pfs(t_max);
            stan::math::initialize(S_pfs, DUMMY_VAR__);
            stan::math::fill(S_pfs, DUMMY_VAR__);
            current_statement_begin__ = 649;
            validate_non_negative_index("S_os_pred", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_os_pred(t_max);
            stan::math::initialize(S_os_pred, DUMMY_VAR__);
            stan::math::fill(S_os_pred, DUMMY_VAR__);
            current_statement_begin__ = 650;
            validate_non_negative_index("S_pfs_pred", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pfs_pred(t_max);
            stan::math::initialize(S_pfs_pred, DUMMY_VAR__);
            stan::math::fill(S_pfs_pred, DUMMY_VAR__);
            current_statement_begin__ = 653;
            double pmean_os;
            (void) pmean_os;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_os, DUMMY_VAR__);
            stan::math::fill(pmean_os, DUMMY_VAR__);
            current_statement_begin__ = 654;
            double pmean_pfs;
            (void) pmean_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_pfs, DUMMY_VAR__);
            stan::math::fill(pmean_pfs, DUMMY_VAR__);
            current_statement_begin__ = 655;
            double pmean_bg;
            (void) pmean_bg;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_bg, DUMMY_VAR__);
            stan::math::fill(pmean_bg, DUMMY_VAR__);
            current_statement_begin__ = 656;
            double pmean_cf_os;
            (void) pmean_cf_os;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_cf_os, DUMMY_VAR__);
            stan::math::fill(pmean_cf_os, DUMMY_VAR__);
            current_statement_begin__ = 657;
            double pmean_cf_pfs;
            (void) pmean_cf_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pmean_cf_pfs, DUMMY_VAR__);
            stan::math::fill(pmean_cf_pfs, DUMMY_VAR__);
            current_statement_begin__ = 659;
            validate_non_negative_index("pS_bg", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pS_bg(t_max);
            stan::math::initialize(pS_bg, DUMMY_VAR__);
            stan::math::fill(pS_bg, DUMMY_VAR__);
            current_statement_begin__ = 660;
            validate_non_negative_index("pS_os", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pS_os(t_max);
            stan::math::initialize(pS_os, DUMMY_VAR__);
            stan::math::fill(pS_os, DUMMY_VAR__);
            current_statement_begin__ = 661;
            validate_non_negative_index("pS_pfs", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> pS_pfs(t_max);
            stan::math::initialize(pS_pfs, DUMMY_VAR__);
            stan::math::fill(pS_pfs, DUMMY_VAR__);
            current_statement_begin__ = 662;
            validate_non_negative_index("S_os_prior", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_os_prior(t_max);
            stan::math::initialize(S_os_prior, DUMMY_VAR__);
            stan::math::fill(S_os_prior, DUMMY_VAR__);
            current_statement_begin__ = 663;
            validate_non_negative_index("S_pfs_prior", "t_max", t_max);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pfs_prior(t_max);
            stan::math::initialize(S_pfs_prior, DUMMY_VAR__);
            stan::math::fill(S_pfs_prior, DUMMY_VAR__);
            current_statement_begin__ = 665;
            validate_non_negative_index("log_lik", "n_os", n_os);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(n_os);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 667;
            double pbeta_os;
            (void) pbeta_os;  // dummy to suppress unused var warning
            stan::math::initialize(pbeta_os, DUMMY_VAR__);
            stan::math::fill(pbeta_os, DUMMY_VAR__);
            stan::math::assign(pbeta_os,normal_rng(get_base1(mu_0_os, 1, "mu_0_os", 1), get_base1(sigma_0_os, 1, "sigma_0_os", 1), base_rng__));
            current_statement_begin__ = 668;
            double pbeta_pfs;
            (void) pbeta_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pbeta_pfs, DUMMY_VAR__);
            stan::math::fill(pbeta_pfs, DUMMY_VAR__);
            stan::math::assign(pbeta_pfs,normal_rng(get_base1(mu_0_pfs, 1, "mu_0_pfs", 1), get_base1(sigma_0_pfs, 1, "sigma_0_pfs", 1), base_rng__));
            current_statement_begin__ = 670;
            double pmu_pfs;
            (void) pmu_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pmu_pfs, DUMMY_VAR__);
            stan::math::fill(pmu_pfs, DUMMY_VAR__);
            stan::math::assign(pmu_pfs,gamma_rng(a_mu_pfs, b_mu_pfs, base_rng__));
            current_statement_begin__ = 671;
            double pmu_os;
            (void) pmu_os;  // dummy to suppress unused var warning
            stan::math::initialize(pmu_os, DUMMY_VAR__);
            stan::math::fill(pmu_os, DUMMY_VAR__);
            stan::math::assign(pmu_os,gamma_rng(a_mu_os, b_mu_os, base_rng__));
            current_statement_begin__ = 673;
            double pQ_pfs;
            (void) pQ_pfs;  // dummy to suppress unused var warning
            stan::math::initialize(pQ_pfs, DUMMY_VAR__);
            stan::math::fill(pQ_pfs, DUMMY_VAR__);
            stan::math::assign(pQ_pfs,gamma_rng(a_Q_pfs, b_Q_pfs, base_rng__));
            current_statement_begin__ = 674;
            double pQ_os;
            (void) pQ_os;  // dummy to suppress unused var warning
            stan::math::initialize(pQ_os, DUMMY_VAR__);
            stan::math::fill(pQ_os, DUMMY_VAR__);
            stan::math::assign(pQ_os,gamma_rng(a_Q_os, b_Q_os, base_rng__));
            current_statement_begin__ = 676;
            double pbeta_bg;
            (void) pbeta_bg;  // dummy to suppress unused var warning
            stan::math::initialize(pbeta_bg, DUMMY_VAR__);
            stan::math::fill(pbeta_bg, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 686;
            if (as_bool(logical_eq(bg_model, 1))) {
                current_statement_begin__ = 687;
                stan::math::assign(pbeta_bg, normal_rng(get_base1(mu_bg, 1, "mu_bg", 1), get_base1(sigma_bg, 1, "sigma_bg", 1), base_rng__));
            } else {
                current_statement_begin__ = 690;
                stan::math::assign(pbeta_bg, stan::math::log(0.001));
            }
            current_statement_begin__ = 694;
            if (as_bool(logical_eq(cf_model, 3))) {
                {
                current_statement_begin__ = 696;
                local_scalar_t__ pcurefrac(DUMMY_VAR__);
                (void) pcurefrac;  // dummy to suppress unused var warning
                stan::math::initialize(pcurefrac, DUMMY_VAR__);
                stan::math::fill(pcurefrac, DUMMY_VAR__);
                stan::math::assign(pcurefrac,normal_rng(get_base1(mu_cf_gl, 1, "mu_cf_gl", 1), get_base1(sigma_cf_gl, 1, "sigma_cf_gl", 1), base_rng__));
                current_statement_begin__ = 697;
                stan::math::assign(pmean_cf_os, inv_logit(pcurefrac));
                current_statement_begin__ = 698;
                stan::math::assign(pmean_cf_pfs, inv_logit(pcurefrac));
                }
            } else if (as_bool(logical_eq(cf_model, 2))) {
                {
                current_statement_begin__ = 700;
                local_scalar_t__ pcf_os(DUMMY_VAR__);
                (void) pcf_os;  // dummy to suppress unused var warning
                stan::math::initialize(pcf_os, DUMMY_VAR__);
                stan::math::fill(pcf_os, DUMMY_VAR__);
                stan::math::assign(pcf_os,normal_rng(get_base1(mu_cf_os, 1, "mu_cf_os", 1), get_base1(sd_cf_os, 1, "sd_cf_os", 1), base_rng__));
                current_statement_begin__ = 701;
                local_scalar_t__ pcf_pfs(DUMMY_VAR__);
                (void) pcf_pfs;  // dummy to suppress unused var warning
                stan::math::initialize(pcf_pfs, DUMMY_VAR__);
                stan::math::fill(pcf_pfs, DUMMY_VAR__);
                stan::math::assign(pcf_pfs,normal_rng(get_base1(mu_cf_pfs, 1, "mu_cf_pfs", 1), get_base1(sd_cf_pfs, 1, "sd_cf_pfs", 1), base_rng__));
                current_statement_begin__ = 702;
                stan::math::assign(pmean_cf_os, inv_logit(pcf_os));
                current_statement_begin__ = 703;
                stan::math::assign(pmean_cf_pfs, inv_logit(pcf_pfs));
                }
            } else {
                {
                current_statement_begin__ = 705;
                local_scalar_t__ pcurefrac(DUMMY_VAR__);
                (void) pcurefrac;  // dummy to suppress unused var warning
                stan::math::initialize(pcurefrac, DUMMY_VAR__);
                stan::math::fill(pcurefrac, DUMMY_VAR__);
                stan::math::assign(pcurefrac,beta_rng(get_base1(a_cf, 1, "a_cf", 1), get_base1(b_cf, 1, "b_cf", 1), base_rng__));
                current_statement_begin__ = 706;
                stan::math::assign(pmean_cf_os, pcurefrac);
                current_statement_begin__ = 707;
                stan::math::assign(pmean_cf_pfs, pcurefrac);
                }
            }
            current_statement_begin__ = 711;
            stan::math::assign(mean_os, stan::math::exp(get_base1(beta_os, 1, "beta_os", 1)));
            current_statement_begin__ = 712;
            stan::math::assign(mean_pfs, stan::math::exp(get_base1(beta_pfs, 1, "beta_pfs", 1)));
            current_statement_begin__ = 715;
            if (as_bool(logical_eq(bg_model, 1))) {
                current_statement_begin__ = 716;
                stan::math::assign(mean_bg, stan::math::exp(get_base1(beta_bg, 1, "beta_bg", 1)));
            } else {
                current_statement_begin__ = 718;
                stan::math::assign(mean_bg, 0.001);
            }
            current_statement_begin__ = 722;
            for (int i = 1; i <= t_max; ++i) {
                current_statement_begin__ = 723;
                stan::model::assign(S_bg, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, mean_bg, pstream__), 
                            "assigning variable S_bg");
                current_statement_begin__ = 724;
                stan::model::assign(S_os, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_gengamma_Surv(i, mu_os, mean_os, Q_os, mean_bg, pstream__), 
                            "assigning variable S_os");
                current_statement_begin__ = 725;
                stan::model::assign(S_pfs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_gengamma_Surv(i, mu_pfs, mean_pfs, Q_os, mean_bg, pstream__), 
                            "assigning variable S_pfs");
                current_statement_begin__ = 727;
                stan::model::assign(S_os_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((cf_os * get_base1(S_bg, i, "S_bg", 1)) + ((1 - cf_os) * get_base1(S_os, i, "S_os", 1))), 
                            "assigning variable S_os_pred");
                current_statement_begin__ = 728;
                stan::model::assign(S_pfs_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((cf_pfs * get_base1(S_bg, i, "S_bg", 1)) + ((1 - cf_pfs) * get_base1(S_pfs, i, "S_pfs", 1))), 
                            "assigning variable S_pfs_pred");
            }
            current_statement_begin__ = 732;
            stan::math::assign(pmean_os, stan::math::exp(pbeta_os));
            current_statement_begin__ = 733;
            stan::math::assign(pmean_pfs, stan::math::exp(pbeta_pfs));
            current_statement_begin__ = 734;
            stan::math::assign(pmean_bg, stan::math::exp(pbeta_bg));
            current_statement_begin__ = 736;
            for (int i = 1; i <= t_max; ++i) {
                current_statement_begin__ = 737;
                stan::model::assign(pS_bg, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, pmean_bg, pstream__), 
                            "assigning variable pS_bg");
                current_statement_begin__ = 738;
                stan::model::assign(pS_os, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_gengamma_Surv(i, pmu_os, pmean_os, pQ_os, pmean_bg, pstream__), 
                            "assigning variable pS_os");
                current_statement_begin__ = 739;
                stan::model::assign(pS_pfs, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_gengamma_Surv(i, pmu_pfs, pmean_pfs, pQ_pfs, pmean_bg, pstream__), 
                            "assigning variable pS_pfs");
                current_statement_begin__ = 741;
                stan::model::assign(S_os_prior, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((pmean_cf_os * get_base1(pS_bg, i, "pS_bg", 1)) + ((1 - pmean_cf_os) * get_base1(pS_os, i, "pS_os", 1))), 
                            "assigning variable S_os_prior");
                current_statement_begin__ = 742;
                stan::model::assign(S_pfs_prior, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((pmean_cf_pfs * get_base1(pS_bg, i, "pS_bg", 1)) + ((1 - pmean_cf_pfs) * get_base1(pS_pfs, i, "pS_pfs", 1))), 
                            "assigning variable S_pfs_prior");
            }
            current_statement_begin__ = 748;
            for (int n = 1; n <= n_os; ++n) {
                current_statement_begin__ = 749;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            (log_sum_exp((stan::math::log(cf_os) + surv_exp_lpdf(get_base1(t_os, n, "t_os", 1), get_base1(d_os, n, "d_os", 1), get_base1(lambda_os_bg, n, "lambda_os_bg", 1), pstream__)), (log1m(cf_os) + joint_exp_gengamma_lpdf(get_base1(t_os, n, "t_os", 1), get_base1(d_os, n, "d_os", 1), mu_os, get_base1(sigma_os, n, "sigma_os", 1), Q_os, get_base1(lambda_os_bg, n, "lambda_os_bg", 1), pstream__))) + log_sum_exp((stan::math::log(cf_pfs) + surv_exp_lpdf(get_base1(t_pfs, n, "t_pfs", 1), get_base1(d_pfs, n, "d_pfs", 1), get_base1(lambda_pfs_bg, n, "lambda_pfs_bg", 1), pstream__)), (log1m(cf_pfs) + joint_exp_gengamma_lpdf(get_base1(t_pfs, n, "t_pfs", 1), get_base1(d_pfs, n, "d_pfs", 1), mu_pfs, get_base1(sigma_pfs, n, "sigma_pfs", 1), Q_pfs, get_base1(lambda_pfs_bg, n, "lambda_pfs_bg", 1), pstream__)))), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 642;
            vars__.push_back(mean_os);
            current_statement_begin__ = 643;
            vars__.push_back(mean_pfs);
            current_statement_begin__ = 644;
            vars__.push_back(mean_bg);
            current_statement_begin__ = 646;
            size_t S_bg_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
                vars__.push_back(S_bg(j_1__));
            }
            current_statement_begin__ = 647;
            size_t S_os_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_os_j_1_max__; ++j_1__) {
                vars__.push_back(S_os(j_1__));
            }
            current_statement_begin__ = 648;
            size_t S_pfs_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_pfs_j_1_max__; ++j_1__) {
                vars__.push_back(S_pfs(j_1__));
            }
            current_statement_begin__ = 649;
            size_t S_os_pred_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_os_pred_j_1_max__; ++j_1__) {
                vars__.push_back(S_os_pred(j_1__));
            }
            current_statement_begin__ = 650;
            size_t S_pfs_pred_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_pfs_pred_j_1_max__; ++j_1__) {
                vars__.push_back(S_pfs_pred(j_1__));
            }
            current_statement_begin__ = 653;
            vars__.push_back(pmean_os);
            current_statement_begin__ = 654;
            vars__.push_back(pmean_pfs);
            current_statement_begin__ = 655;
            vars__.push_back(pmean_bg);
            current_statement_begin__ = 656;
            vars__.push_back(pmean_cf_os);
            current_statement_begin__ = 657;
            vars__.push_back(pmean_cf_pfs);
            current_statement_begin__ = 659;
            size_t pS_bg_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < pS_bg_j_1_max__; ++j_1__) {
                vars__.push_back(pS_bg(j_1__));
            }
            current_statement_begin__ = 660;
            size_t pS_os_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < pS_os_j_1_max__; ++j_1__) {
                vars__.push_back(pS_os(j_1__));
            }
            current_statement_begin__ = 661;
            size_t pS_pfs_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < pS_pfs_j_1_max__; ++j_1__) {
                vars__.push_back(pS_pfs(j_1__));
            }
            current_statement_begin__ = 662;
            size_t S_os_prior_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_os_prior_j_1_max__; ++j_1__) {
                vars__.push_back(S_os_prior(j_1__));
            }
            current_statement_begin__ = 663;
            size_t S_pfs_prior_j_1_max__ = t_max;
            for (size_t j_1__ = 0; j_1__ < S_pfs_prior_j_1_max__; ++j_1__) {
                vars__.push_back(S_pfs_prior(j_1__));
            }
            current_statement_begin__ = 665;
            size_t log_lik_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 667;
            vars__.push_back(pbeta_os);
            current_statement_begin__ = 668;
            vars__.push_back(pbeta_pfs);
            current_statement_begin__ = 670;
            vars__.push_back(pmu_pfs);
            current_statement_begin__ = 671;
            vars__.push_back(pmu_os);
            current_statement_begin__ = 673;
            vars__.push_back(pQ_pfs);
            current_statement_begin__ = 674;
            vars__.push_back(pQ_os);
            current_statement_begin__ = 676;
            vars__.push_back(pbeta_bg);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_gengamma_gengamma";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bg_j_1_max__ = (logical_eq(bg_model, 1) ? H_os : 0 );
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_joint_k_0_max__ = joint_model;
        for (size_t k_0__ = 0; k_0__ < beta_joint_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_joint" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q_os";
        param_names__.push_back(param_name_stream__.str());
        size_t cf_pooled_k_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < cf_pooled_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cf_pooled" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lp_cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_global_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lp_cf_global" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lp_cf_os_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_os_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lp_cf_os" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lp_cf_pfs_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_pfs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lp_cf_pfs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t lp_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < sigma_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < sigma_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < cf_global_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cf_global" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "cf_os";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "cf_pfs";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t S_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_bg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_cf_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_cf_pfs";
        param_names__.push_back(param_name_stream__.str());
        size_t pS_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n_os;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmu_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmu_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pQ_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pQ_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_bg";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_os_j_1_max__ = H_os;
        for (size_t j_1__ = 0; j_1__ < beta_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_pfs_j_1_max__ = H_pfs;
        for (size_t j_1__ = 0; j_1__ < beta_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bg_j_1_max__ = (logical_eq(bg_model, 1) ? H_os : 0 );
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_joint_k_0_max__ = joint_model;
        for (size_t k_0__ = 0; k_0__ < beta_joint_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_joint" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q_os";
        param_names__.push_back(param_name_stream__.str());
        size_t cf_pooled_k_0_max__ = (logical_eq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < cf_pooled_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cf_pooled" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lp_cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_global_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lp_cf_global" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lp_cf_os_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_os_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lp_cf_os" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lp_cf_pfs_k_0_max__ = (logical_neq(cf_model, 1) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < lp_cf_pfs_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lp_cf_pfs" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t lp_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lp_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lp_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lp_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_os_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < sigma_os_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_os" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_pfs_j_1_max__ = n_pfs;
            for (size_t j_1__ = 0; j_1__ < sigma_pfs_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma_pfs" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_os_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_pfs_bg_j_1_max__ = n_os;
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t cf_global_k_0_max__ = (logical_eq(cf_model, 3) ? 1 : 0 );
            for (size_t k_0__ = 0; k_0__ < cf_global_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cf_global" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "cf_os";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "cf_pfs";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mean_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t S_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_pred_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_bg";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_cf_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmean_cf_pfs";
        param_names__.push_back(param_name_stream__.str());
        size_t pS_bg_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_os_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_os_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_os" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pS_pfs_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < pS_pfs_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pS_pfs" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_os_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_os_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_os_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pfs_prior_j_1_max__ = t_max;
        for (size_t j_1__ = 0; j_1__ < S_pfs_prior_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pfs_prior" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = n_os;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmu_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pmu_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pQ_pfs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pQ_os";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pbeta_bg";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_gengamma_gengamma_namespace::model_gengamma_gengamma stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
