// Generated by rstantools.  Do not edit by hand.

/*
    rstanbmcm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanbmcm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanbmcm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_postpred_exp_exp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_postpred_exp_exp");
    reader.add_event(107, 105, "end", "model_postpred_exp_exp");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1, Eigen::Dynamic>
rate_mean_rng(const T0__& curefrac,
                  const T1__& lambda0,
                  const T2__& lambda_bg,
                  const int& n, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("lambda", "n", n);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> lambda(n);
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        current_statement_begin__ = 12;
        validate_non_negative_index("cf", "n", n);
        std::vector<local_scalar_t__  > cf(n, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(cf, DUMMY_VAR__);
        stan::math::fill(cf, DUMMY_VAR__);
        current_statement_begin__ = 14;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 15;
            stan::model::assign(cf, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        uniform_rng(0, 1, base_rng__), 
                        "assigning variable cf");
            current_statement_begin__ = 17;
            if (as_bool(logical_lt(get_base1(cf, i, "cf", 1), curefrac))) {
                current_statement_begin__ = 18;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            lambda_bg, 
                            "assigning variable lambda");
            } else {
                current_statement_begin__ = 20;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (lambda_bg + lambda0), 
                            "assigning variable lambda");
            }
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lambda);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rate_mean_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1, Eigen::Dynamic>
    operator()(const T0__& curefrac,
                  const T1__& lambda0,
                  const T2__& lambda_bg,
                  const int& n, RNG& base_rng__, std::ostream* pstream__) const {
        return rate_mean_rng(curefrac, lambda0, lambda_bg, n, base_rng__, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, class RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1, Eigen::Dynamic>
rate_casemix_rng(const T0__& curefrac,
                     const Eigen::Matrix<T1__, 1, Eigen::Dynamic>& lambda0,
                     const Eigen::Matrix<T2__, 1, Eigen::Dynamic>& lambda_bg,
                     const int& n, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 29;
        validate_non_negative_index("lambda", "n", n);
        Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> lambda(n);
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        current_statement_begin__ = 30;
        validate_non_negative_index("cf", "n", n);
        std::vector<local_scalar_t__  > cf(n, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(cf, DUMMY_VAR__);
        stan::math::fill(cf, DUMMY_VAR__);
        current_statement_begin__ = 32;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 33;
            stan::model::assign(cf, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        uniform_rng(0, 1, base_rng__), 
                        "assigning variable cf");
            current_statement_begin__ = 35;
            if (as_bool(logical_lt(get_base1(cf, i, "cf", 1), curefrac))) {
                current_statement_begin__ = 36;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(lambda_bg, i, "lambda_bg", 1), 
                            "assigning variable lambda");
            } else {
                current_statement_begin__ = 38;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(lambda_bg, i, "lambda_bg", 1) + get_base1(lambda0, i, "lambda0", 1)), 
                            "assigning variable lambda");
            }
        }
        current_statement_begin__ = 41;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lambda);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rate_casemix_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, 1, Eigen::Dynamic>
    operator()(const T0__& curefrac,
                     const Eigen::Matrix<T1__, 1, Eigen::Dynamic>& lambda0,
                     const Eigen::Matrix<T2__, 1, Eigen::Dynamic>& lambda_bg,
                     const int& n, RNG& base_rng__, std::ostream* pstream__) const {
        return rate_casemix_rng(curefrac, lambda0, lambda_bg, n, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_postpred_exp_exp
  : public stan::model::model_base_crtp<model_postpred_exp_exp> {
private:
        int n;
        double os_model;
        double pfs_model;
        int n_samples;
        std::vector<double> cf_os;
        std::vector<double> cf_pfs;
        matrix_d lambda_os;
        matrix_d lambda_pfs;
        matrix_d lambda_os_bg;
        matrix_d lambda_pfs_bg;
        std::vector<std::vector<double> > beta_os;
        std::vector<std::vector<double> > beta_pfs;
        std::vector<std::vector<double> > beta_bg;
public:
    model_postpred_exp_exp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_postpred_exp_exp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_postpred_exp_exp_namespace::model_postpred_exp_exp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "os_model", "double", context__.to_vec());
            os_model = double(0);
            vals_r__ = context__.vals_r("os_model");
            pos__ = 0;
            os_model = vals_r__[pos__++];
            check_greater_or_equal(function__, "os_model", os_model, 1);
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "pfs_model", "double", context__.to_vec());
            pfs_model = double(0);
            vals_r__ = context__.vals_r("pfs_model");
            pos__ = 0;
            pfs_model = vals_r__[pos__++];
            check_greater_or_equal(function__, "pfs_model", pfs_model, 1);
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "n_samples", "int", context__.to_vec());
            n_samples = int(0);
            vals_i__ = context__.vals_i("n_samples");
            pos__ = 0;
            n_samples = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_samples", n_samples, 1);
            current_statement_begin__ = 51;
            validate_non_negative_index("cf_os", "n_samples", n_samples);
            context__.validate_dims("data initialization", "cf_os", "double", context__.to_vec(n_samples));
            cf_os = std::vector<double>(n_samples, double(0));
            vals_r__ = context__.vals_r("cf_os");
            pos__ = 0;
            size_t cf_os_k_0_max__ = n_samples;
            for (size_t k_0__ = 0; k_0__ < cf_os_k_0_max__; ++k_0__) {
                cf_os[k_0__] = vals_r__[pos__++];
            }
            size_t cf_os_i_0_max__ = n_samples;
            for (size_t i_0__ = 0; i_0__ < cf_os_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cf_os[i_0__]", cf_os[i_0__], 0);
                check_less_or_equal(function__, "cf_os[i_0__]", cf_os[i_0__], 1);
            }
            current_statement_begin__ = 52;
            validate_non_negative_index("cf_pfs", "n_samples", n_samples);
            context__.validate_dims("data initialization", "cf_pfs", "double", context__.to_vec(n_samples));
            cf_pfs = std::vector<double>(n_samples, double(0));
            vals_r__ = context__.vals_r("cf_pfs");
            pos__ = 0;
            size_t cf_pfs_k_0_max__ = n_samples;
            for (size_t k_0__ = 0; k_0__ < cf_pfs_k_0_max__; ++k_0__) {
                cf_pfs[k_0__] = vals_r__[pos__++];
            }
            size_t cf_pfs_i_0_max__ = n_samples;
            for (size_t i_0__ = 0; i_0__ < cf_pfs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cf_pfs[i_0__]", cf_pfs[i_0__], 0);
                check_less_or_equal(function__, "cf_pfs[i_0__]", cf_pfs[i_0__], 1);
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("lambda_os", "n_samples", n_samples);
            validate_non_negative_index("lambda_os", "n", n);
            context__.validate_dims("data initialization", "lambda_os", "matrix_d", context__.to_vec(n_samples,n));
            lambda_os = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_samples, n);
            vals_r__ = context__.vals_r("lambda_os");
            pos__ = 0;
            size_t lambda_os_j_2_max__ = n;
            size_t lambda_os_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_os_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_os_j_1_max__; ++j_1__) {
                    lambda_os(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("lambda_pfs", "n_samples", n_samples);
            validate_non_negative_index("lambda_pfs", "n", n);
            context__.validate_dims("data initialization", "lambda_pfs", "matrix_d", context__.to_vec(n_samples,n));
            lambda_pfs = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_samples, n);
            vals_r__ = context__.vals_r("lambda_pfs");
            pos__ = 0;
            size_t lambda_pfs_j_2_max__ = n;
            size_t lambda_pfs_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_pfs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_j_1_max__; ++j_1__) {
                    lambda_pfs(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("lambda_os_bg", "n_samples", n_samples);
            validate_non_negative_index("lambda_os_bg", "n", n);
            context__.validate_dims("data initialization", "lambda_os_bg", "matrix_d", context__.to_vec(n_samples,n));
            lambda_os_bg = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_samples, n);
            vals_r__ = context__.vals_r("lambda_os_bg");
            pos__ = 0;
            size_t lambda_os_bg_j_2_max__ = n;
            size_t lambda_os_bg_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_os_bg_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_os_bg_j_1_max__; ++j_1__) {
                    lambda_os_bg(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("lambda_pfs_bg", "n_samples", n_samples);
            validate_non_negative_index("lambda_pfs_bg", "n", n);
            context__.validate_dims("data initialization", "lambda_pfs_bg", "matrix_d", context__.to_vec(n_samples,n));
            lambda_pfs_bg = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_samples, n);
            vals_r__ = context__.vals_r("lambda_pfs_bg");
            pos__ = 0;
            size_t lambda_pfs_bg_j_2_max__ = n;
            size_t lambda_pfs_bg_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_pfs_bg_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_bg_j_1_max__; ++j_1__) {
                    lambda_pfs_bg(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 60;
            validate_non_negative_index("beta_os", "n_samples", n_samples);
            validate_non_negative_index("beta_os", "2", 2);
            context__.validate_dims("data initialization", "beta_os", "double", context__.to_vec(n_samples,2));
            beta_os = std::vector<std::vector<double> >(n_samples, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("beta_os");
            pos__ = 0;
            size_t beta_os_k_0_max__ = n_samples;
            size_t beta_os_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < beta_os_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_os_k_0_max__; ++k_0__) {
                    beta_os[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 61;
            validate_non_negative_index("beta_pfs", "n_samples", n_samples);
            validate_non_negative_index("beta_pfs", "2", 2);
            context__.validate_dims("data initialization", "beta_pfs", "double", context__.to_vec(n_samples,2));
            beta_pfs = std::vector<std::vector<double> >(n_samples, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("beta_pfs");
            pos__ = 0;
            size_t beta_pfs_k_0_max__ = n_samples;
            size_t beta_pfs_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < beta_pfs_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_pfs_k_0_max__; ++k_0__) {
                    beta_pfs[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 62;
            validate_non_negative_index("beta_bg", "n_samples", n_samples);
            validate_non_negative_index("beta_bg", "2", 2);
            context__.validate_dims("data initialization", "beta_bg", "double", context__.to_vec(n_samples,2));
            beta_bg = std::vector<std::vector<double> >(n_samples, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("beta_bg");
            pos__ = 0;
            size_t beta_bg_k_0_max__ = n_samples;
            size_t beta_bg_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < beta_bg_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_bg_k_0_max__; ++k_0__) {
                    beta_bg[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_postpred_exp_exp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda_os_tilde");
        names__.push_back("t_os_tilde");
        names__.push_back("lambda_pfs_tilde");
        names__.push_back("t_pfs_tilde");
        names__.push_back("lambda_os_mean");
        names__.push_back("lambda_pfs_mean");
        names__.push_back("lambda_bg");
        names__.push_back("lambda_os_bar");
        names__.push_back("t_os_bar");
        names__.push_back("lambda_pfs_bar");
        names__.push_back("t_pfs_bar");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_samples);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_postpred_exp_exp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 71;
            validate_non_negative_index("lambda_os_tilde", "n_samples", n_samples);
            validate_non_negative_index("lambda_os_tilde", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda_os_tilde(n_samples, n);
            stan::math::initialize(lambda_os_tilde, DUMMY_VAR__);
            stan::math::fill(lambda_os_tilde, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("t_os_tilde", "n_samples", n_samples);
            validate_non_negative_index("t_os_tilde", "n", n);
            std::vector<std::vector<double> > t_os_tilde(n_samples, std::vector<double>(n, double(0)));
            stan::math::initialize(t_os_tilde, DUMMY_VAR__);
            stan::math::fill(t_os_tilde, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("lambda_pfs_tilde", "n_samples", n_samples);
            validate_non_negative_index("lambda_pfs_tilde", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda_pfs_tilde(n_samples, n);
            stan::math::initialize(lambda_pfs_tilde, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_tilde, DUMMY_VAR__);
            current_statement_begin__ = 74;
            validate_non_negative_index("t_pfs_tilde", "n_samples", n_samples);
            validate_non_negative_index("t_pfs_tilde", "n", n);
            std::vector<std::vector<double> > t_pfs_tilde(n_samples, std::vector<double>(n, double(0)));
            stan::math::initialize(t_pfs_tilde, DUMMY_VAR__);
            stan::math::fill(t_pfs_tilde, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("lambda_os_mean", "n_samples", n_samples);
            std::vector<double> lambda_os_mean(n_samples, double(0));
            stan::math::initialize(lambda_os_mean, DUMMY_VAR__);
            stan::math::fill(lambda_os_mean, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("lambda_pfs_mean", "n_samples", n_samples);
            std::vector<double> lambda_pfs_mean(n_samples, double(0));
            stan::math::initialize(lambda_pfs_mean, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_mean, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("lambda_bg", "n_samples", n_samples);
            std::vector<double> lambda_bg(n_samples, double(0));
            stan::math::initialize(lambda_bg, DUMMY_VAR__);
            stan::math::fill(lambda_bg, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("lambda_os_bar", "n_samples", n_samples);
            validate_non_negative_index("lambda_os_bar", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda_os_bar(n_samples, n);
            stan::math::initialize(lambda_os_bar, DUMMY_VAR__);
            stan::math::fill(lambda_os_bar, DUMMY_VAR__);
            current_statement_begin__ = 80;
            validate_non_negative_index("t_os_bar", "n_samples", n_samples);
            validate_non_negative_index("t_os_bar", "n", n);
            std::vector<std::vector<double> > t_os_bar(n_samples, std::vector<double>(n, double(0)));
            stan::math::initialize(t_os_bar, DUMMY_VAR__);
            stan::math::fill(t_os_bar, DUMMY_VAR__);
            current_statement_begin__ = 81;
            validate_non_negative_index("lambda_pfs_bar", "n_samples", n_samples);
            validate_non_negative_index("lambda_pfs_bar", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda_pfs_bar(n_samples, n);
            stan::math::initialize(lambda_pfs_bar, DUMMY_VAR__);
            stan::math::fill(lambda_pfs_bar, DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("t_pfs_bar", "n_samples", n_samples);
            validate_non_negative_index("t_pfs_bar", "n", n);
            std::vector<std::vector<double> > t_pfs_bar(n_samples, std::vector<double>(n, double(0)));
            stan::math::initialize(t_pfs_bar, DUMMY_VAR__);
            stan::math::fill(t_pfs_bar, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 84;
            for (int i = 1; i <= n_samples; ++i) {
                current_statement_begin__ = 87;
                stan::model::assign(lambda_os_mean, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(get_base1(beta_os, i, "beta_os", 1), 1, "beta_os", 2)), 
                            "assigning variable lambda_os_mean");
                current_statement_begin__ = 88;
                stan::model::assign(lambda_pfs_mean, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(get_base1(beta_pfs, i, "beta_pfs", 1), 1, "beta_pfs", 2)), 
                            "assigning variable lambda_pfs_mean");
                current_statement_begin__ = 89;
                stan::model::assign(lambda_bg, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(get_base1(beta_bg, i, "beta_bg", 1), 1, "beta_bg", 2)), 
                            "assigning variable lambda_bg");
                current_statement_begin__ = 91;
                stan::model::assign(lambda_os_bar, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list())), 
                            rate_mean_rng(get_base1(cf_os, i, "cf_os", 1), get_base1(lambda_os_mean, i, "lambda_os_mean", 1), get_base1(lambda_bg, i, "lambda_bg", 1), n, base_rng__, pstream__), 
                            "assigning variable lambda_os_bar");
                current_statement_begin__ = 92;
                stan::model::assign(t_os_bar, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            exponential_rng(stan::model::rvalue(lambda_os_bar, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_os_bar"), base_rng__), 
                            "assigning variable t_os_bar");
                current_statement_begin__ = 94;
                stan::model::assign(lambda_pfs_bar, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::nil_index_list())), 
                            rate_mean_rng(get_base1(cf_pfs, i, "cf_pfs", 1), get_base1(lambda_pfs_mean, i, "lambda_pfs_mean", 1), get_base1(lambda_bg, i, "lambda_bg", 1), n, base_rng__, pstream__), 
                            "assigning variable lambda_pfs_bar");
                current_statement_begin__ = 95;
                stan::model::assign(t_pfs_bar, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            exponential_rng(stan::model::rvalue(lambda_pfs_bar, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_pfs_bar"), base_rng__), 
                            "assigning variable t_pfs_bar");
                current_statement_begin__ = 98;
                stan::model::assign(lambda_os_tilde, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            rate_casemix_rng(get_base1(cf_os, i, "cf_os", 1), stan::model::rvalue(lambda_os, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_os"), stan::model::rvalue(lambda_os_bg, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_os_bg"), n, base_rng__, pstream__), 
                            "assigning variable lambda_os_tilde");
                current_statement_begin__ = 99;
                stan::model::assign(t_os_tilde, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            exponential_rng(stan::model::rvalue(lambda_os_tilde, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_os_tilde"), base_rng__), 
                            "assigning variable t_os_tilde");
                current_statement_begin__ = 101;
                stan::model::assign(lambda_pfs_tilde, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            rate_casemix_rng(get_base1(cf_pfs, i, "cf_pfs", 1), stan::model::rvalue(lambda_pfs, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_pfs"), stan::model::rvalue(lambda_pfs_bg, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_pfs_bg"), n, base_rng__, pstream__), 
                            "assigning variable lambda_pfs_tilde");
                current_statement_begin__ = 102;
                stan::model::assign(t_pfs_tilde, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            exponential_rng(stan::model::rvalue(lambda_pfs_tilde, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_pfs_tilde"), base_rng__), 
                            "assigning variable t_pfs_tilde");
            }
            // validate, write generated quantities
            current_statement_begin__ = 71;
            size_t lambda_os_tilde_j_2_max__ = n;
            size_t lambda_os_tilde_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_os_tilde_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_os_tilde_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_os_tilde(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 72;
            size_t t_os_tilde_i_0_max__ = n_samples;
            size_t t_os_tilde_i_1_max__ = n;
            for (size_t i_0__ = 0; i_0__ < t_os_tilde_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < t_os_tilde_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "t_os_tilde[i_0__][i_1__]", t_os_tilde[i_0__][i_1__], 0);
                }
            }
            size_t t_os_tilde_k_0_max__ = n_samples;
            size_t t_os_tilde_k_1_max__ = n;
            for (size_t k_1__ = 0; k_1__ < t_os_tilde_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_os_tilde_k_0_max__; ++k_0__) {
                    vars__.push_back(t_os_tilde[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 73;
            size_t lambda_pfs_tilde_j_2_max__ = n;
            size_t lambda_pfs_tilde_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_pfs_tilde_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_tilde_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_pfs_tilde(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 74;
            size_t t_pfs_tilde_i_0_max__ = n_samples;
            size_t t_pfs_tilde_i_1_max__ = n;
            for (size_t i_0__ = 0; i_0__ < t_pfs_tilde_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < t_pfs_tilde_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "t_pfs_tilde[i_0__][i_1__]", t_pfs_tilde[i_0__][i_1__], 0);
                }
            }
            size_t t_pfs_tilde_k_0_max__ = n_samples;
            size_t t_pfs_tilde_k_1_max__ = n;
            for (size_t k_1__ = 0; k_1__ < t_pfs_tilde_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_pfs_tilde_k_0_max__; ++k_0__) {
                    vars__.push_back(t_pfs_tilde[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 76;
            size_t lambda_os_mean_k_0_max__ = n_samples;
            for (size_t k_0__ = 0; k_0__ < lambda_os_mean_k_0_max__; ++k_0__) {
                vars__.push_back(lambda_os_mean[k_0__]);
            }
            current_statement_begin__ = 77;
            size_t lambda_pfs_mean_k_0_max__ = n_samples;
            for (size_t k_0__ = 0; k_0__ < lambda_pfs_mean_k_0_max__; ++k_0__) {
                vars__.push_back(lambda_pfs_mean[k_0__]);
            }
            current_statement_begin__ = 78;
            size_t lambda_bg_k_0_max__ = n_samples;
            for (size_t k_0__ = 0; k_0__ < lambda_bg_k_0_max__; ++k_0__) {
                vars__.push_back(lambda_bg[k_0__]);
            }
            current_statement_begin__ = 79;
            size_t lambda_os_bar_j_2_max__ = n;
            size_t lambda_os_bar_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_os_bar_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_os_bar_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_os_bar(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 80;
            size_t t_os_bar_i_0_max__ = n_samples;
            size_t t_os_bar_i_1_max__ = n;
            for (size_t i_0__ = 0; i_0__ < t_os_bar_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < t_os_bar_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "t_os_bar[i_0__][i_1__]", t_os_bar[i_0__][i_1__], 0);
                }
            }
            size_t t_os_bar_k_0_max__ = n_samples;
            size_t t_os_bar_k_1_max__ = n;
            for (size_t k_1__ = 0; k_1__ < t_os_bar_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_os_bar_k_0_max__; ++k_0__) {
                    vars__.push_back(t_os_bar[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 81;
            size_t lambda_pfs_bar_j_2_max__ = n;
            size_t lambda_pfs_bar_j_1_max__ = n_samples;
            for (size_t j_2__ = 0; j_2__ < lambda_pfs_bar_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_pfs_bar_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_pfs_bar(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 82;
            size_t t_pfs_bar_i_0_max__ = n_samples;
            size_t t_pfs_bar_i_1_max__ = n;
            for (size_t i_0__ = 0; i_0__ < t_pfs_bar_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < t_pfs_bar_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "t_pfs_bar[i_0__][i_1__]", t_pfs_bar[i_0__][i_1__], 0);
                }
            }
            size_t t_pfs_bar_k_0_max__ = n_samples;
            size_t t_pfs_bar_k_1_max__ = n;
            for (size_t k_1__ = 0; k_1__ < t_pfs_bar_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_pfs_bar_k_0_max__; ++k_0__) {
                    vars__.push_back(t_pfs_bar[k_0__][k_1__]);
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_postpred_exp_exp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t lambda_os_tilde_j_2_max__ = n;
        size_t lambda_os_tilde_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_os_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_os_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_os_tilde_k_0_max__ = n_samples;
        size_t t_os_tilde_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_os_tilde_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_os_tilde_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_os_tilde" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_pfs_tilde_j_2_max__ = n;
        size_t lambda_pfs_tilde_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_pfs_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_pfs_tilde_k_0_max__ = n_samples;
        size_t t_pfs_tilde_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_pfs_tilde_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_pfs_tilde_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_pfs_tilde" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_os_mean_k_0_max__ = n_samples;
        for (size_t k_0__ = 0; k_0__ < lambda_os_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_os_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_pfs_mean_k_0_max__ = n_samples;
        for (size_t k_0__ = 0; k_0__ < lambda_pfs_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_pfs_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_bg_k_0_max__ = n_samples;
        for (size_t k_0__ = 0; k_0__ < lambda_bg_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_bg" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_os_bar_j_2_max__ = n;
        size_t lambda_os_bar_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_os_bar_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_os_bar_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_bar" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_os_bar_k_0_max__ = n_samples;
        size_t t_os_bar_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_os_bar_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_os_bar_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_os_bar" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_pfs_bar_j_2_max__ = n;
        size_t lambda_pfs_bar_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_pfs_bar_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bar_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_bar" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_pfs_bar_k_0_max__ = n_samples;
        size_t t_pfs_bar_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_pfs_bar_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_pfs_bar_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_pfs_bar" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t lambda_os_tilde_j_2_max__ = n;
        size_t lambda_os_tilde_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_os_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_os_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_os_tilde_k_0_max__ = n_samples;
        size_t t_os_tilde_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_os_tilde_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_os_tilde_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_os_tilde" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_pfs_tilde_j_2_max__ = n;
        size_t lambda_pfs_tilde_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_pfs_tilde_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_tilde_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_tilde" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_pfs_tilde_k_0_max__ = n_samples;
        size_t t_pfs_tilde_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_pfs_tilde_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_pfs_tilde_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_pfs_tilde" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_os_mean_k_0_max__ = n_samples;
        for (size_t k_0__ = 0; k_0__ < lambda_os_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_os_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_pfs_mean_k_0_max__ = n_samples;
        for (size_t k_0__ = 0; k_0__ < lambda_pfs_mean_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_pfs_mean" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_bg_k_0_max__ = n_samples;
        for (size_t k_0__ = 0; k_0__ < lambda_bg_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_bg" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_os_bar_j_2_max__ = n;
        size_t lambda_os_bar_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_os_bar_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_os_bar_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_os_bar" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_os_bar_k_0_max__ = n_samples;
        size_t t_os_bar_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_os_bar_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_os_bar_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_os_bar" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t lambda_pfs_bar_j_2_max__ = n;
        size_t lambda_pfs_bar_j_1_max__ = n_samples;
        for (size_t j_2__ = 0; j_2__ < lambda_pfs_bar_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < lambda_pfs_bar_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_pfs_bar" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t t_pfs_bar_k_0_max__ = n_samples;
        size_t t_pfs_bar_k_1_max__ = n;
        for (size_t k_1__ = 0; k_1__ < t_pfs_bar_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < t_pfs_bar_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "t_pfs_bar" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_postpred_exp_exp_namespace::model_postpred_exp_exp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
