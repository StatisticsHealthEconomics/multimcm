// Generated by rstantools.  Do not edit by hand.

/*
    rstanbmcm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rstanbmcm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rstanbmcm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_exp_relative_mix_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_exp_relative_mix");
    reader.add_event(4, 4, "include", "/include/distributions.stan");
    reader.add_event(4, 0, "start", "/include/distributions.stan");
    reader.add_event(124, 120, "end", "/include/distributions.stan");
    reader.add_event(124, 5, "restart", "model_exp_relative_mix");
    reader.add_event(232, 111, "end", "model_exp_relative_mix");
    return reader;
}
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_log_h(const T0__& t,
              const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        local_scalar_t__ logh(DUMMY_VAR__);
        (void) logh;  // dummy to suppress unused var warning
        stan::math::initialize(logh, DUMMY_VAR__);
        stan::math::fill(logh, DUMMY_VAR__);
        current_statement_begin__ = 15;
        stan::math::assign(logh, stan::math::log(rate));
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_log_h_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
              const T1__& rate, std::ostream* pstream__) const {
        return exp_log_h(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_haz(const T0__& t,
            const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 21;
        local_scalar_t__ h(DUMMY_VAR__);
        (void) h;  // dummy to suppress unused var warning
        stan::math::initialize(h, DUMMY_VAR__);
        stan::math::fill(h, DUMMY_VAR__);
        current_statement_begin__ = 22;
        stan::math::assign(h, rate);
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_haz_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
            const T1__& rate, std::ostream* pstream__) const {
        return exp_haz(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_log_S(const T0__& t,
              const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        local_scalar_t__ logS(DUMMY_VAR__);
        (void) logS;  // dummy to suppress unused var warning
        stan::math::initialize(logS, DUMMY_VAR__);
        stan::math::fill(logS, DUMMY_VAR__);
        current_statement_begin__ = 29;
        stan::math::assign(logS, (-(rate) * t));
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_log_S_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
              const T1__& rate, std::ostream* pstream__) const {
        return exp_log_S(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
exp_Surv(const T0__& t,
             const T1__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 35;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 36;
        stan::math::assign(S, stan::math::exp((-(rate) * t)));
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct exp_Surv_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& t,
             const T1__& rate, std::ostream* pstream__) const {
        return exp_Surv(t, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_pdf(const T0__& t,
                 const T1__& d,
                 const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 42;
        local_scalar_t__ lik(DUMMY_VAR__);
        (void) lik;  // dummy to suppress unused var warning
        stan::math::initialize(lik, DUMMY_VAR__);
        stan::math::fill(lik, DUMMY_VAR__);
        current_statement_begin__ = 43;
        stan::math::assign(lik, (pow(exp_haz(t, rate, pstream__), d) * exp_Surv(t, rate, pstream__)));
        current_statement_begin__ = 44;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct surv_exp_pdf_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& d,
                 const T2__& rate, std::ostream* pstream__) const {
        return surv_exp_pdf(t, d, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_lpdf(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 49;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 50;
        stan::math::assign(log_lik, ((d * exp_log_h(t, rate, pstream__)) + exp_log_S(t, rate, pstream__)));
        current_statement_begin__ = 51;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
surv_exp_lpdf(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) {
    return surv_exp_lpdf<false>(t,d,rate, pstream__);
}
struct surv_exp_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& d,
                  const T2__& rate, std::ostream* pstream__) const {
        return surv_exp_lpdf(t, d, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_log_h(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 63;
        local_scalar_t__ logh(DUMMY_VAR__);
        (void) logh;  // dummy to suppress unused var warning
        stan::math::initialize(logh, DUMMY_VAR__);
        stan::math::fill(logh, DUMMY_VAR__);
        current_statement_begin__ = 64;
        stan::math::assign(logh, ((stan::math::log(shape) + ((shape - 1) * stan::math::log((t / scale)))) - stan::math::log(scale)));
        current_statement_begin__ = 65;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return weibull_log_h(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_log_S(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 70;
        local_scalar_t__ logS(DUMMY_VAR__);
        (void) logS;  // dummy to suppress unused var warning
        stan::math::initialize(logS, DUMMY_VAR__);
        stan::math::fill(logS, DUMMY_VAR__);
        current_statement_begin__ = 71;
        stan::math::assign(logS, -(pow((t / scale), shape)));
        current_statement_begin__ = 72;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& scale, std::ostream* pstream__) const {
        return weibull_log_S(t, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_Surv(const T0__& t,
                 const T1__& alpha,
                 const T2__& beta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 77;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 78;
        stan::math::assign(S, stan::math::exp(-(pow((t / alpha), beta))));
        current_statement_begin__ = 79;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct weibull_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                 const T1__& alpha,
                 const T2__& beta, std::ostream* pstream__) const {
        return weibull_Surv(t, alpha, beta, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_weibull_lpdf(const T0__& t,
                      const T1__& d,
                      const T2__& shape,
                      const T3__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 84;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 85;
        stan::math::assign(log_lik, ((d * weibull_log_h(t, shape, scale, pstream__)) + weibull_log_S(t, shape, scale, pstream__)));
        current_statement_begin__ = 86;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_weibull_lpdf(const T0__& t,
                      const T1__& d,
                      const T2__& shape,
                      const T3__& scale, std::ostream* pstream__) {
    return surv_weibull_lpdf<false>(t,d,shape,scale, pstream__);
}
struct surv_weibull_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                      const T1__& d,
                      const T2__& shape,
                      const T3__& scale, std::ostream* pstream__) const {
        return surv_weibull_lpdf(t, d, shape, scale, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_log_h(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 98;
        local_scalar_t__ log_h(DUMMY_VAR__);
        (void) log_h;  // dummy to suppress unused var warning
        stan::math::initialize(log_h, DUMMY_VAR__);
        stan::math::fill(log_h, DUMMY_VAR__);
        current_statement_begin__ = 99;
        stan::math::assign(log_h, (stan::math::log(rate) + (shape * t)));
        current_statement_begin__ = 100;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_h);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_log_h_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) const {
        return gompertz_log_h(t, shape, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_log_S(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 105;
        local_scalar_t__ log_S(DUMMY_VAR__);
        (void) log_S;  // dummy to suppress unused var warning
        stan::math::initialize(log_S, DUMMY_VAR__);
        stan::math::fill(log_S, DUMMY_VAR__);
        current_statement_begin__ = 106;
        stan::math::assign(log_S, ((-(rate) / shape) * (stan::math::exp((shape * t)) - 1)));
        current_statement_begin__ = 107;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_log_S_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                   const T1__& shape,
                   const T2__& rate, std::ostream* pstream__) const {
        return gompertz_log_S(t, shape, rate, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
gompertz_Surv(const T0__& t,
                  const T1__& shape,
                  const T2__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 112;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        current_statement_begin__ = 113;
        stan::math::assign(S, stan::math::exp(((-(rate) / shape) * (stan::math::exp((shape * t)) - 1))));
        current_statement_begin__ = 114;
        return stan::math::promote_scalar<fun_return_scalar_t__>(S);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gompertz_Surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& shape,
                  const T2__& rate, std::ostream* pstream__) const {
        return gompertz_Surv(t, shape, rate, pstream__);
    }
};
template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_gompertz_lpdf(const T0__& t,
                       const T1__& d,
                       const T2__& shape,
                       const T3__& rate, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 119;
        local_scalar_t__ log_lik(DUMMY_VAR__);
        (void) log_lik;  // dummy to suppress unused var warning
        stan::math::initialize(log_lik, DUMMY_VAR__);
        stan::math::fill(log_lik, DUMMY_VAR__);
        current_statement_begin__ = 120;
        local_scalar_t__ prob(DUMMY_VAR__);
        (void) prob;  // dummy to suppress unused var warning
        stan::math::initialize(prob, DUMMY_VAR__);
        stan::math::fill(prob, DUMMY_VAR__);
        current_statement_begin__ = 121;
        stan::math::assign(log_lik, ((d * gompertz_log_h(t, shape, rate, pstream__)) + gompertz_log_S(t, shape, rate, pstream__)));
        current_statement_begin__ = 122;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_lik);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
surv_gompertz_lpdf(const T0__& t,
                       const T1__& d,
                       const T2__& shape,
                       const T3__& rate, std::ostream* pstream__) {
    return surv_gompertz_lpdf<false>(t,d,shape,rate, pstream__);
}
struct surv_gompertz_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                       const T1__& d,
                       const T2__& shape,
                       const T3__& rate, std::ostream* pstream__) const {
        return surv_gompertz_lpdf(t, d, shape, rate, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_exp_relative_mix
  : public stan::model::model_base_crtp<model_exp_relative_mix> {
private:
        int n;
        vector_d t;
        vector_d d;
        int H;
        matrix_d X;
        vector_d mu_beta;
        vector_d sigma_beta;
        vector_d mu_bg;
        vector_d sigma_bg;
        double a_cf;
        double b_cf;
public:
    model_exp_relative_mix(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_exp_relative_mix(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_exp_relative_mix_namespace::model_exp_relative_mix";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 130;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 131;
            validate_non_negative_index("t", "n", n);
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(n));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 132;
            validate_non_negative_index("d", "n", n);
            context__.validate_dims("data initialization", "d", "vector_d", context__.to_vec(n));
            d = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("d");
            pos__ = 0;
            size_t d_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < d_j_1_max__; ++j_1__) {
                d(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 133;
            context__.validate_dims("data initialization", "H", "int", context__.to_vec());
            H = int(0);
            vals_i__ = context__.vals_i("H");
            pos__ = 0;
            H = vals_i__[pos__++];
            current_statement_begin__ = 134;
            validate_non_negative_index("X", "n", n);
            validate_non_negative_index("X", "H", H);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(n,H));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, H);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = H;
            size_t X_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 142;
            validate_non_negative_index("mu_beta", "H", H);
            context__.validate_dims("data initialization", "mu_beta", "vector_d", context__.to_vec(H));
            mu_beta = Eigen::Matrix<double, Eigen::Dynamic, 1>(H);
            vals_r__ = context__.vals_r("mu_beta");
            pos__ = 0;
            size_t mu_beta_j_1_max__ = H;
            for (size_t j_1__ = 0; j_1__ < mu_beta_j_1_max__; ++j_1__) {
                mu_beta(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 143;
            validate_non_negative_index("sigma_beta", "H", H);
            context__.validate_dims("data initialization", "sigma_beta", "vector_d", context__.to_vec(H));
            sigma_beta = Eigen::Matrix<double, Eigen::Dynamic, 1>(H);
            vals_r__ = context__.vals_r("sigma_beta");
            pos__ = 0;
            size_t sigma_beta_j_1_max__ = H;
            for (size_t j_1__ = 0; j_1__ < sigma_beta_j_1_max__; ++j_1__) {
                sigma_beta(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_beta", sigma_beta, 0);
            current_statement_begin__ = 144;
            validate_non_negative_index("mu_bg", "H", H);
            context__.validate_dims("data initialization", "mu_bg", "vector_d", context__.to_vec(H));
            mu_bg = Eigen::Matrix<double, Eigen::Dynamic, 1>(H);
            vals_r__ = context__.vals_r("mu_bg");
            pos__ = 0;
            size_t mu_bg_j_1_max__ = H;
            for (size_t j_1__ = 0; j_1__ < mu_bg_j_1_max__; ++j_1__) {
                mu_bg(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 145;
            validate_non_negative_index("sigma_bg", "H", H);
            context__.validate_dims("data initialization", "sigma_bg", "vector_d", context__.to_vec(H));
            sigma_bg = Eigen::Matrix<double, Eigen::Dynamic, 1>(H);
            vals_r__ = context__.vals_r("sigma_bg");
            pos__ = 0;
            size_t sigma_bg_j_1_max__ = H;
            for (size_t j_1__ = 0; j_1__ < sigma_bg_j_1_max__; ++j_1__) {
                sigma_bg(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "sigma_bg", sigma_bg, 0);
            current_statement_begin__ = 147;
            context__.validate_dims("data initialization", "a_cf", "double", context__.to_vec());
            a_cf = double(0);
            vals_r__ = context__.vals_r("a_cf");
            pos__ = 0;
            a_cf = vals_r__[pos__++];
            current_statement_begin__ = 148;
            context__.validate_dims("data initialization", "b_cf", "double", context__.to_vec());
            b_cf = double(0);
            vals_r__ = context__.vals_r("b_cf");
            pos__ = 0;
            b_cf = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 153;
            validate_non_negative_index("beta0", "H", H);
            num_params_r__ += H;
            current_statement_begin__ = 154;
            validate_non_negative_index("beta_bg", "H", H);
            num_params_r__ += H;
            current_statement_begin__ = 155;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_exp_relative_mix() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 153;
        if (!(context__.contains_r("beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta0");
        pos__ = 0U;
        validate_non_negative_index("beta0", "H", H);
        context__.validate_dims("parameter initialization", "beta0", "vector_d", context__.to_vec(H));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0(H);
        size_t beta0_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            beta0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 154;
        if (!(context__.contains_r("beta_bg")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_bg missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_bg");
        pos__ = 0U;
        validate_non_negative_index("beta_bg", "H", H);
        context__.validate_dims("parameter initialization", "beta_bg", "vector_d", context__.to_vec(H));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bg(H);
        size_t beta_bg_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            beta_bg(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_bg);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_bg: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 155;
        if (!(context__.contains_r("curefrac")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable curefrac missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("curefrac");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "curefrac", "double", context__.to_vec());
        double curefrac(0);
        curefrac = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, curefrac);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable curefrac: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 153;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta0;
            (void) beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta0 = in__.vector_constrain(H, lp__);
            else
                beta0 = in__.vector_constrain(H);
            current_statement_begin__ = 154;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_bg;
            (void) beta_bg;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_bg = in__.vector_constrain(H, lp__);
            else
                beta_bg = in__.vector_constrain(H);
            current_statement_begin__ = 155;
            local_scalar_t__ curefrac;
            (void) curefrac;  // dummy to suppress unused var warning
            if (jacobian__)
                curefrac = in__.scalar_lub_constrain(0, 1, lp__);
            else
                curefrac = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 159;
            validate_non_negative_index("linpred0", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> linpred0(n);
            stan::math::initialize(linpred0, DUMMY_VAR__);
            stan::math::fill(linpred0, DUMMY_VAR__);
            current_statement_begin__ = 160;
            validate_non_negative_index("linpred_bg", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> linpred_bg(n);
            stan::math::initialize(linpred_bg, DUMMY_VAR__);
            stan::math::fill(linpred_bg, DUMMY_VAR__);
            current_statement_begin__ = 161;
            validate_non_negative_index("lambda0", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda0(n);
            stan::math::initialize(lambda0, DUMMY_VAR__);
            stan::math::fill(lambda0, DUMMY_VAR__);
            current_statement_begin__ = 162;
            validate_non_negative_index("lambda_bg", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_bg(n);
            stan::math::initialize(lambda_bg, DUMMY_VAR__);
            stan::math::fill(lambda_bg, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 164;
            stan::math::assign(linpred0, multiply(X, beta0));
            current_statement_begin__ = 165;
            stan::math::assign(linpred_bg, multiply(X, beta_bg));
            current_statement_begin__ = 168;
            stan::math::assign(lambda0, stan::math::exp(linpred0));
            current_statement_begin__ = 169;
            stan::math::assign(lambda_bg, stan::math::exp(linpred_bg));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 159;
            size_t linpred0_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < linpred0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(linpred0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: linpred0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable linpred0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 160;
            size_t linpred_bg_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < linpred_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(linpred_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: linpred_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable linpred_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 161;
            size_t lambda0_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lambda0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 162;
            size_t lambda_bg_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lambda_bg_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lambda_bg(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lambda_bg" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_bg: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 177;
            lp_accum__.add(normal_log<propto__>(beta0, mu_beta, sigma_beta));
            current_statement_begin__ = 178;
            lp_accum__.add(normal_log<propto__>(beta_bg, mu_bg, sigma_bg));
            current_statement_begin__ = 180;
            lp_accum__.add(beta_log<propto__>(curefrac, a_cf, b_cf));
            current_statement_begin__ = 182;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 189;
                lp_accum__.add(log_sum_exp((stan::math::log(curefrac) + surv_exp_lpdf(get_base1(t, i, "t", 1), get_base1(d, i, "d", 1), get_base1(lambda_bg, i, "lambda_bg", 1), pstream__)), (log1m(curefrac) + surv_exp_lpdf(get_base1(t, i, "t", 1), get_base1(d, i, "d", 1), (get_base1(lambda_bg, i, "lambda_bg", 1) + get_base1(lambda0, i, "lambda0", 1)), pstream__))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta0");
        names__.push_back("beta_bg");
        names__.push_back("curefrac");
        names__.push_back("linpred0");
        names__.push_back("linpred_bg");
        names__.push_back("lambda0");
        names__.push_back("lambda_bg");
        names__.push_back("rate0");
        names__.push_back("rate_bg");
        names__.push_back("S_bg");
        names__.push_back("S0");
        names__.push_back("S_pred");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(H);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(60);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(60);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(60);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_exp_relative_mix_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta0 = in__.vector_constrain(H);
        size_t beta0_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            vars__.push_back(beta0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_bg = in__.vector_constrain(H);
        size_t beta_bg_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            vars__.push_back(beta_bg(j_1__));
        }
        double curefrac = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(curefrac);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 159;
            validate_non_negative_index("linpred0", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> linpred0(n);
            stan::math::initialize(linpred0, DUMMY_VAR__);
            stan::math::fill(linpred0, DUMMY_VAR__);
            current_statement_begin__ = 160;
            validate_non_negative_index("linpred_bg", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> linpred_bg(n);
            stan::math::initialize(linpred_bg, DUMMY_VAR__);
            stan::math::fill(linpred_bg, DUMMY_VAR__);
            current_statement_begin__ = 161;
            validate_non_negative_index("lambda0", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda0(n);
            stan::math::initialize(lambda0, DUMMY_VAR__);
            stan::math::fill(lambda0, DUMMY_VAR__);
            current_statement_begin__ = 162;
            validate_non_negative_index("lambda_bg", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lambda_bg(n);
            stan::math::initialize(lambda_bg, DUMMY_VAR__);
            stan::math::fill(lambda_bg, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 164;
            stan::math::assign(linpred0, multiply(X, beta0));
            current_statement_begin__ = 165;
            stan::math::assign(linpred_bg, multiply(X, beta_bg));
            current_statement_begin__ = 168;
            stan::math::assign(lambda0, stan::math::exp(linpred0));
            current_statement_begin__ = 169;
            stan::math::assign(lambda_bg, stan::math::exp(linpred_bg));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t linpred0_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < linpred0_j_1_max__; ++j_1__) {
                    vars__.push_back(linpred0(j_1__));
                }
                size_t linpred_bg_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < linpred_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(linpred_bg(j_1__));
                }
                size_t lambda0_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < lambda0_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda0(j_1__));
                }
                size_t lambda_bg_j_1_max__ = n;
                for (size_t j_1__ = 0; j_1__ < lambda_bg_j_1_max__; ++j_1__) {
                    vars__.push_back(lambda_bg(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 197;
            double rate0;
            (void) rate0;  // dummy to suppress unused var warning
            stan::math::initialize(rate0, DUMMY_VAR__);
            stan::math::fill(rate0, DUMMY_VAR__);
            current_statement_begin__ = 198;
            double rate_bg;
            (void) rate_bg;  // dummy to suppress unused var warning
            stan::math::initialize(rate_bg, DUMMY_VAR__);
            stan::math::fill(rate_bg, DUMMY_VAR__);
            current_statement_begin__ = 199;
            validate_non_negative_index("S_bg", "60", 60);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_bg(60);
            stan::math::initialize(S_bg, DUMMY_VAR__);
            stan::math::fill(S_bg, DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("S0", "60", 60);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S0(60);
            stan::math::initialize(S0, DUMMY_VAR__);
            stan::math::fill(S0, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("S_pred", "60", 60);
            Eigen::Matrix<double, Eigen::Dynamic, 1> S_pred(60);
            stan::math::initialize(S_pred, DUMMY_VAR__);
            stan::math::fill(S_pred, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 204;
            stan::math::assign(rate0, stan::math::exp(get_base1(beta0, 1, "beta0", 1)));
            current_statement_begin__ = 205;
            stan::math::assign(rate_bg, stan::math::exp(get_base1(beta_bg, 1, "beta_bg", 1)));
            current_statement_begin__ = 207;
            for (int i = 1; i <= 60; ++i) {
                current_statement_begin__ = 208;
                stan::model::assign(S_bg, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, rate_bg, pstream__), 
                            "assigning variable S_bg");
                current_statement_begin__ = 209;
                stan::model::assign(S0, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exp_Surv(i, (rate_bg + rate0), pstream__), 
                            "assigning variable S0");
                current_statement_begin__ = 210;
                stan::model::assign(S_pred, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((curefrac * get_base1(S_bg, i, "S_bg", 1)) + ((1 - curefrac) * get_base1(S0, i, "S0", 1))), 
                            "assigning variable S_pred");
            }
            // validate, write generated quantities
            current_statement_begin__ = 197;
            vars__.push_back(rate0);
            current_statement_begin__ = 198;
            vars__.push_back(rate_bg);
            current_statement_begin__ = 199;
            size_t S_bg_j_1_max__ = 60;
            for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
                vars__.push_back(S_bg(j_1__));
            }
            current_statement_begin__ = 200;
            size_t S0_j_1_max__ = 60;
            for (size_t j_1__ = 0; j_1__ < S0_j_1_max__; ++j_1__) {
                vars__.push_back(S0(j_1__));
            }
            current_statement_begin__ = 201;
            size_t S_pred_j_1_max__ = 60;
            for (size_t j_1__ = 0; j_1__ < S_pred_j_1_max__; ++j_1__) {
                vars__.push_back(S_pred(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_exp_relative_mix";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta0_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bg_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "curefrac";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t linpred0_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < linpred0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linpred0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t linpred_bg_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < linpred_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linpred_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda0_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lambda0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_bg_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lambda_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "rate0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rate_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t S_bg_j_1_max__ = 60;
        for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S0_j_1_max__ = 60;
        for (size_t j_1__ = 0; j_1__ < S0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pred_j_1_max__ = 60;
        for (size_t j_1__ = 0; j_1__ < S_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta0_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_bg_j_1_max__ = H;
        for (size_t j_1__ = 0; j_1__ < beta_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "curefrac";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t linpred0_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < linpred0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linpred0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t linpred_bg_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < linpred_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linpred_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda0_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lambda0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lambda_bg_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < lambda_bg_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lambda_bg" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "rate0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rate_bg";
        param_names__.push_back(param_name_stream__.str());
        size_t S_bg_j_1_max__ = 60;
        for (size_t j_1__ = 0; j_1__ < S_bg_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_bg" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S0_j_1_max__ = 60;
        for (size_t j_1__ = 0; j_1__ < S0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_pred_j_1_max__ = 60;
        for (size_t j_1__ = 0; j_1__ < S_pred_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_pred" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_exp_relative_mix_namespace::model_exp_relative_mix stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
